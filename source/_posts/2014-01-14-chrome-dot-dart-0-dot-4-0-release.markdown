---
layout: post
title: "chrome.dart 0.4.0 release"
date: 2014-01-14 09:33
comments: true
categories: 
- Dart
- Google Apps API
- Google Ext API
- chrome.dart
---

The [dart-gde](https://github.com/dart-gde?tab=members) has updated the [chrome.dart](https://github.com/dart-gde/chrome.dart) to '0.4.0'. This release contains a whole rewrite of the project. All APIs are now generated from chrome apps/ext [IDLs](https://src.chromium.org/chrome/trunk/src/chrome/common/extensions/api). Most unit tests from previous [chrome.dart](https://github.com/dart-gde/chrome.dart) have been ported.

## About chrome.dart

[chrome.dart](http://pub.dartlang.org/packages/chrome) package provides the generated APIs to access chrome [apps & extensions](https://developer.chrome.com/apps/about_apps.html) through dart interfaces. The APIs depend on the [js-interop](https://github.com/dart-lang/js-interop) to communicate with the javascript vm for accessing the APIs. Currently no native interfaces exist between dart vm and chrome browser. In a later point in time those interfaces will exist, for now this provides a way to access those interfaces. 

## chrome_gen.dart -> chrome.dart

At first [chrome_gen.dart](https://github.com/dart-gde/chrome_gen.dart) was the project that kicked off moving to generated APIs. It was getting frustrating having to hand write, maintain and test [chrome.dart](http://pub.dartlang.org/packages/chrome). We did avoid looking into generation from IDL, because the IDL in the chromium is in two different formats [json & chrome specific WebIDL](https://src.chromium.org/chrome/trunk/src/chrome/common/extensions/api). The nice part about the original [chrome.dart](https://github.com/dart-gde/chrome.dart) package is we could introduce more structure for the APIs then what the generated javascript APIs looked like. So after initial development by [Devon Carew](https://github.com/devoncarew/), we decided it was a better direction to use [parsers and generators](https://github.com/dart-gde/chrome.dart/tree/master/tool) to create and maintain the APIs. Four months later we had a 90% complete package that was already being used by a few projects, including [spark](https://github.com/dart-lang/spark). We are able to generate enough structure to keep nice APIs and generate form the IDL, this was a win for the project.

## Documentation

The API documentation is automatically generated for [Apps](http://dart-gde.github.io/chrome.dart/app/) and [Extensions](http://dart-gde.github.io/chrome.dart/ext/) on each check in. A few wiki pages exist and we are in the process of migrating them from [chrome_gen.dart wiki](https://github.com/dart-gde/chrome_gen.dart/wiki) -> [chrome.dart wiki](https://github.com/dart-gde/chrome.dart/wiki). We do need help and welcome pull requests and wiki edits.

## Samples

Currently the best source of project setup exists with [app](https://github.com/dart-gde/chrome.dart/tree/master/app) in the project. The `app` folder in a dart project will not have the automatic symlinks generated by `pub`. That helps out greatly since it would pollute our folder structure and cause bad things to happen. Instead we have a simple [setup_app.dart](https://github.com/dart-gde/chrome.dart/blob/master/bin/setup_app.dart) script that helps build and copy packages over to the `app` folder. Right now its specific for the [chrome.dart](https://github.com/dart-gde/chrome.dart) project but should be easy to replicate for your own chrome apps or extensions. Another neat script which is mac specific but could be generalized is [load_app.sh](https://github.com/dart-gde/chrome.dart/blob/master/bin/load_app.sh). [load_app.sh](https://github.com/dart-gde/chrome.dart/blob/master/bin/load_app.sh) shows a simple way to load up an application in `app` folder from command line.

## Helping out

We still need more unit tests, documentation, and additional development. If your interested checkout the [github issues](https://github.com/dart-gde/chrome.dart/issues?state=open) or send pull requests. 

## Thanks!

To all the contributors on this project [Devon Carew](https://github.com/devoncarew), [Kevin Moore](https://github.com/kevmoo), [Ross Smith](https://github.com/rmsmith), [Marc Fisher](https://github.com/DrMarcII)