<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: API | Random posts about coding]]></title>
  <link href="http://financeCoding.github.com/blog/categories/api/atom.xml" rel="self"/>
  <link href="http://financeCoding.github.com/"/>
  <updated>2014-03-28T14:46:55-07:00</updated>
  <id>http://financeCoding.github.com/</id>
  <author>
    <name><![CDATA[Adam Singer]]></name>
    <email><![CDATA[financeCoding@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Getting started with Google Cloud Datastore and Dart]]></title>
    <link href="http://financeCoding.github.com/blog/2014/03/28/getting-started-with-google-cloud-datastore-and-dart/"/>
    <updated>2014-03-28T14:38:00-07:00</updated>
    <id>http://financeCoding.github.com/blog/2014/03/28/getting-started-with-google-cloud-datastore-and-dart</id>
    <content type="html"><![CDATA[<p><strong>NOTE: Experimental and future developments with Dart+GCE+Datastore may change</strong></p>

<p>Before running through the steps below, make sure that:</p>

<ul>
<li>You have <a href="https://developers.google.com/datastore/docs/activate">enabled</a> Google Cloud Datastore API.</li>
<li>You have your <code>&lt;project-id&gt;</code> (same identifier as your Google Cloud <a href="https://developers.google.com/datastore/docs/activate#project_id">Project ID</a>).</li>
<li>You are <a href="https://developers.google.com/compute/docs/instances#sshing">connected</a> to a Compute Engine instance with both the <code>datastore</code> and
<code>userinfo.email</code> <a href="https://developers.google.com/compute/docs/authentication#using">scopes</a> or have a <a href="https://developers.google.com/datastore/docs/activate#service_account"><service-account></a> and the <a href="https://developers.google.com/datastore/docs/activate#private_key"><path-to-private-key-file></a>.</li>
<li>You have a working local <a href="https://www.dartlang.org/tools/download.html">dart environment</a> or working <a href="#example-deployment-and-startup-scripts-for-gce-with-dart">Compute Engine instance</a></li>
</ul>


<p>In order to make API calls to the Datastore, <code>pubspec.yaml</code> file needs the following</p>

<p><code>yaml
dependencies:
  google_oauth2_client: '&gt;=0.3.6 &lt;0.3.7'
  google_datastore_v1beta2_api: "&gt;=0.4.0 &lt;0.5.0"
</code></p>

<p>Then, get the <a href="https://github.com/financeCoding/dart_datastore_example"><code>dart_datastore_example</code></a> sample:</p>

<p><code>bash
git clone https://github.com/financeCoding/dart_datastore_example.git
cd dart_datastore_example
pub install
</code></p>

<p>If you are not connected to a Compute Engine instance, make sure to run
the following commands (in a bash-like shell):</p>

<p>```bash</p>

<h1>convert the .p12 private key file to a .pem file</h1>

<h1>if asked to enter import password, use "notasecret"</h1>

<p>openssl pkcs12 -in <privatekey>.p12 -nocerts -passin pass:notasecret -nodes -out <rsa_private_key>.pem</p>

<h1>configure your credentials</h1>

<p>export DATASTORE_SERVICE_ACCOUNT=<service-account>
export DATASTORE_PRIVATE_KEY_FILE=<path-to-pem-file>
export CLOUD_PROJECT_ID=<project-id>
export CLOUD_PROJECT_NUMBER=<project-number>
```</p>

<p>Alternatively the sample allows for passing parameters via commandline:</p>

<p>```bash
cd dart_datastore_example
pub install
cd bin</p>

<h1>dart dart_datastore_example.dart <project-id> <project-number> <path-to-pem-file> <service-account></h1>

<p>dart dart_datastore_example.dart dartcloud 657648630269 privatekey.pem 657648630269-ge2he8e46y4u42bd89nmgtj52j3ilzvv@developer.gserviceaccount.com
```</p>

<p>Example output on first run:</p>

<p>```
dartcloud
657648630269
privatekey.pem
657648630269-ge2he8e46y4u42bd89nmgtj52j3ilzvv@developer.gserviceaccount.com
did not found entity</p>

<blockquote><p>entity = {question: {"stringValue":"Meaning of life?"}, answer: {"integerValue":42}}
```</p></blockquote>

<p>Example output on second run:</p>

<p>```
dartcloud
657648630269
privatekey.pem
657648630269-ge2he8e46y4u42bd89nmgtj52j3ilzvv@developer.gserviceaccount.com
found entity = {"key":{"partitionId":{"datasetId":"s~dartcloud"},"path":[{"kind":"Trivia","name":"hgtg"}]},"properties":{"question":{"stringValue":"Meaning of life?"},"answer":{"integerValue":42}}}</p>

<blockquote><p>entity = {question: {"stringValue":"Meaning of life?"}, answer: {"integerValue":42}}
```</p></blockquote>

<p>The comments in the sample's source explain its behavior in detail:</p>

<p>```dart
import "dart:io";</p>

<p>import "package:google_oauth2_client/google_oauth2_console.dart";
import "package:google_datastore_v1beta2_api/datastore_v1beta2_api_client.dart"</p>

<pre><code>as client;
</code></pre>

<p>import "package:google_datastore_v1beta2_api/datastore_v1beta2_api_console.dart"</p>

<pre><code>as console;
</code></pre>

<p>void main(List<String> args) {
  Map&lt;String, String> envVars = Platform.environment;
  String projectId = envVars['CLOUD_PROJECT_ID'] == null ?</p>

<pre><code>  args[0] : envVars['CLOUD_PROJECT_ID'];
</code></pre>

<p>  String projectNumber = envVars['CLOUD_PROJECT_NUMBER'] == null ?</p>

<pre><code>  args[1] : envVars['CLOUD_PROJECT_NUMBER'];
</code></pre>

<p>  String pemFilename = envVars['DATASTORE_PRIVATE_KEY_FILE'] == null ?</p>

<pre><code>  args[2] : envVars['DATASTORE_PRIVATE_KEY_FILE'];
</code></pre>

<p>  String serviceAccountEmail = envVars['DATASTORE_SERVICE_ACCOUNT'] == null ?</p>

<pre><code>  args[3] : envVars['DATASTORE_SERVICE_ACCOUNT'];
</code></pre>

<p>  print(projectId);
  print(projectNumber);
  print(pemFilename);
  print(serviceAccountEmail);</p>

<p>  String iss = serviceAccountEmail;
  String scopes = 'https://www.googleapis.com/auth/userinfo.email '</p>

<pre><code>  'https://www.googleapis.com/auth/datastore';
</code></pre>

<p>  String rsa_private_key_file = new File(pemFilename).readAsStringSync();</p>

<p>  ComputeOAuth2Console computeEngineClient = new ComputeOAuth2Console(</p>

<pre><code>  projectNumber, privateKey: rsa_private_key_file, iss: iss, scopes: scopes);
</code></pre>

<p>  console.Datastore datastore = new console.Datastore(computeEngineClient)
  ..makeAuthRequests = true;</p>

<p>  // Create a RPC request to begin a new transaction
  var beginTransactionRequest = new client.BeginTransactionRequest.fromJson({});
  String transaction;
  client.Key key;
  client.Entity entity;</p>

<p>  // Execute the RPC asynchronously
  datastore.datasets.beginTransaction(beginTransactionRequest, projectId).then(</p>

<pre><code>  (client.BeginTransactionResponse beginTransactionResponse) {
// Get the transaction handle from the response.
transaction = beginTransactionResponse.transaction;

// Create a RPC request to get entities by key.
var lookupRequest = new client.LookupRequest.fromJson({});

// Create a new entities by key
key = new client.Key.fromJson({});

// Set the entity key with only one `path_element`: no parent.
var path = new client.KeyPathElement.fromJson({
  'kind': 'Trivia',
  'name': 'hgtg'
});
key.path = new List&lt;client.KeyPathElement&gt;();
key.path.add(path);
lookupRequest.keys = new List&lt;client.Key&gt;();

// Add one key to the lookup request.
lookupRequest.keys.add(key);

// Set the transaction, so we get a consistent snapshot of the
// entity at the time the transaction started.
lookupRequest.readOptions = new client.ReadOptions.fromJson({
  'transaction': transaction
});

// Execute the RPC and get the response.
return datastore.datasets.lookup(lookupRequest, projectId);
</code></pre>

<p>  }).then((client.LookupResponse lookupResponse) {</p>

<pre><code>// Create a RPC request to commit the transaction.
var req = new client.CommitRequest.fromJson({});

// Set the transaction to commit.
req.transaction = transaction;

if (lookupResponse.found.isNotEmpty) {
  // Get the entity from the response if found
  entity = lookupResponse.found.first.entity;
  print("found entity = ${entity.toString()}");
} else {
  print("did not found entity");
  // If no entity was found, insert a new one in the commit request mutation.
  entity = new client.Entity.fromJson({});
  req.mutation = new client.Mutation.fromJson({});
  req.mutation.insert = new List&lt;client.Entity&gt;();
  req.mutation.insert.add(entity);

  // Copy the entity key.
  entity.key = new client.Key.fromJson(key.toJson());

  // Add two entity properties:

  // - a utf-8 string: `question`
  client.Property property = new client.Property.fromJson({});
  property.stringValue = "Meaning of life?";
  entity.properties = new Map&lt;String, client.Property&gt;();
  entity.properties['question'] = property;

  // - a 64bit integer: `answer`
  property = new client.Property.fromJson({});
  property.integerValue = 42;
  entity.properties['answer'] = property;

  // Execute the Commit RPC synchronously and ignore the response:
  // Apply the insert mutation if the entity was not found and close
  // the transaction.
  return datastore.datasets.commit(req, projectId);
}
</code></pre>

<p>  }).then((client.CommitResponse commitResponse) =></p>

<pre><code>  print("&gt; entity = ${entity.properties}"));
</code></pre>

<p>}
```</p>

<p>With this example, you learned how to use the:</p>

<ul>
<li><a href="http://pub.dartlang.org/packages/google_datastore_v1beta1_api">google_datastore_v1beta1_api</a> dart package to connect to the Datastore API.</li>
<li><a href="">beginTransaction</a> method to start a transaction.</li>
<li><a href="https://developers.google.com/datastore/docs/apis/v1beta2/datasets/lookup">lookup</a> method to retrieve entities by key from your dataset.</li>
<li><a href="https://developers.google.com/datastore/docs/apis/v1beta2/datasets/commit">commit</a> method to send mutations to entities in your dataset and commit the transaction.</li>
</ul>


<p>Now, you are ready to learn more about the <a href="https://developers.google.com/datastore/docs/concepts/">Key Datastore Concepts</a> and look at the <a href="https://developers.google.com/datastore/docs/apis/v1beta2/">JSON API reference</a>.</p>

<hr />

<h2>Example deployment and startup scripts for GCE with Dart</h2>

<p><code>setup-instance.sh</code> script creates the node with the right correct scopes and image.</p>

<p>```</p>

<h1>!/usr/bin/env bash</h1>

<p>set +o xtrace</p>

<p>USER=$USER
PROJECT=dart-compute-project
INSTANCE_NAME=dart-compute
TAGS=dart
MACHINE_TYPE=f1-micro
NETWORK=default
IP=ephemeral
IMAGE=https://www.googleapis.com/compute/v1/projects/debian-cloud/global/images/backports-debian-7-wheezy-v20140318
SCOPES=https://www.googleapis.com/auth/userinfo.email,https://www.googleapis.com/auth/compute,https://www.googleapis.com/auth/devstorage.full_control,https://www.googleapis.com/auth/datastore
PERSISTENT_BOOT_DISK=true
AUTO_DELETE_BOOT_DISK=true
ZONE=us-central1-b
STARTUP_SCRIPT=startup-script.sh
GCUTIL="gcutil --service_version=v1 --project=$PROJECT"</p>

<p>$GCUTIL addinstance $INSTANCE_NAME --tags=$TAGS --zone=$ZONE --machine_type=$MACHINE_TYPE --network=$NETWORK --external_ip_address=$IP --service_account_scopes=$SCOPES --image=$IMAGE --persistent_boot_disk=$PERSISTENT_BOOT_DISK --auto_delete_boot_disk=$AUTO_DELETE_BOOT_DISK --metadata_from_file=startup-script:$STARTUP_SCRIPT</p>

<p>rc=$?
if [[ $rc != 0 ]] ; then
  echo "Not able to add instance"</p>

<pre><code>exit $rc
</code></pre>

<p>fi
```</p>

<p><code>startup-script.sh</code> script that provisions the node with dart.</p>

<p>```</p>

<h1>!/usr/bin/env bash</h1>

<h1>Add an addtional source for the latest glibc</h1>

<p>sudo sed -i '1i deb http://ftp.us.debian.org/debian/ jessie main' /etc/apt/sources.list</p>

<h1>Update sources</h1>

<p>sudo apt-get update</p>

<h1>Download latest glibc</h1>

<p>sudo DEBIAN_FRONTEND=noninteractive apt-get -t jessie install -y libc6 libc6-dev libc6-dbg git screen unzip vim</p>

<h1>Download the latest dart sdk</h1>

<p>wget http://storage.googleapis.com/dart-archive/channels/dev/release/latest/sdk/dartsdk-linux-x64-release.zip -O dartsdk-linux-x64-release.zip</p>

<h1>Unpack the dart sdk</h1>

<p>unzip -d / dartsdk-linux-x64-release.zip</p>

<h1>Make the sdk readable</h1>

<p>chmod -R go+rx /dart-sdk</p>

<h1>Add dart bin to global path</h1>

<p>echo "export PATH=\$PATH:/dart-sdk/bin" >> /etc/profile
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[gplus quickstart with dart]]></title>
    <link href="http://financeCoding.github.com/blog/2013/04/02/gplus-quickstart-with-dart/"/>
    <updated>2013-04-02T19:25:00-07:00</updated>
    <id>http://financeCoding.github.com/blog/2013/04/02/gplus-quickstart-with-dart</id>
    <content type="html"><![CDATA[<p>Tonights mash-up was taking the <a href="https://github.com/Scarygami/gplus-quickstart-dart">gplus-quickstart-dart</a> and wiring it up for server side support. Similar to the <a href="https://github.com/googleplus/gplus-quickstart-java">gplus-quickstart-java</a>, the client will use the <a href="https://developers.google.com/+/web/+1button/">gplus login button</a> to do the <a href="https://developers.google.com/accounts/docs/OAuth2WebServer">OAuth2WebServer</a> flow and send the code over to the server. The server can then verify and make calls on behalf of the client since an 'offline' token was requested. This demo just features the server side and what was used to put it together. <a href="https://plus.google.com/u/0/109130932502535286138/">Yulian Kuncheff</a> has been the primary developer behind <a href="https://github.com/Daegalus/fukiya">fukiya</a> which is an express like framework for dart. The thing I liked most about <a href="https://github.com/Daegalus/fukiya">fukiya</a> was how simple and easy it was to setup URL handlers.</p>

<p>First off, setting up some dependencies.</p>

<p><code>
dependencies:
  google_plus_v1_api: any
  browser: any
  fukiya: '&gt;=0.0.11'
  html5lib: "&gt;=0.4.1 &lt;0.4.2"
  logging: "&gt;=0.4.3+5"
</code></p>

<p>A quick outline of what URLs fukiya handles. Dead simple to setup!</p>

<p><code>dart
void main() {
  new Fukiya()
  ..get('/', getIndexHandler)
  ..get('/index.html', getIndexHandler)
  ..get('/index', getIndexHandler)
  ..post('/connect', postConnectDataHandler)
  ..get('/people', getPeopleHandler)
  ..post('/disconnect', postDisconnectHandler)
  ..staticFiles('./web')
  ..use(new FukiyaJsonParser())
  ..listen('127.0.0.1', 3333);
}
</code></p>

<p>The index handler is special cause we needed to inject a state token into the page and HTTP session. The state token is then verified on the <code>/connect</code> post. The one-time token helps avoid any <a href="http://en.wikipedia.org/wiki/Confused_deputy_problem">Confused_deputy_problem</a>s.</p>

<p>```dart
void getIndexHandler(FukiyaContext context) {
  // Create a state token.
  context.request.session["state_token"] = _createStateToken();</p>

<p>  // Readin the index file and add state token into the meta element.
  var file = new File(INDEX_HTML);
  file.exists().then((bool exists) {</p>

<pre><code>if (exists) {
  file.readAsString().then((String indexDocument) {
    Document doc = new Document.html(indexDocument);
    Element metaState = new Element.html('&lt;meta name="state_token" content="${context.request.session["state_token"]}"&gt;');
    doc.head.children.add(metaState);
    context.response.writeBytes(doc.outerHtml.codeUnits);
    context.response.done.catchError((e) =&gt; serverLogger.fine("File Response error: ${e}"));
    context.response.close();
  }, onError: (error) =&gt; serverLogger.fine("error = $error"));
} else {
  context.response.statusCode = 404;
  context.response.close();
}
</code></pre>

<p>  });
}
```</p>

<p>On the <code>/connect</code> post we will expect a gplus id to be passed to the query parameters and some token data posted. We can then verify the state token and use the token data for accessing the Google APIs.</p>

<p>```dart
void postConnectDataHandler(FukiyaContext context) {
  serverLogger.fine("postConnectDataHandler");
  String tokenData = context.request.session.containsKey("access_token") ? context.request.session["access_token"] : null; // TODO: handle missing token
  String stateToken = context.request.session.containsKey("state_token") ? context.request.session["state_token"] : null;
  String queryStateToken = context.request.queryParameters.containsKey("state_token") ? context.request.queryParameters["state_token"] : null;</p>

<p>  // Check if the token already exists for this session.
  if (tokenData != null) {</p>

<pre><code>context.send("Current user is already connected.");
return;
</code></pre>

<p>  }</p>

<p>  // Check if any of the needed token values are null or mismatched.
  if (stateToken == null || queryStateToken == null || stateToken != queryStateToken) {</p>

<pre><code>context.response.statusCode = 401;
context.send("Invalid state parameter."); 
return;
</code></pre>

<p>  }</p>

<p>  // Normally the state would be a one-time use token, however in our
  // simple case, we want a user to be able to connect and disconnect
  // without reloading the page.  Thus, for demonstration, we don't
  // implement this best practice.
  context.request.session.remove("state_token");</p>

<p>  String gPlusId = context.request.queryParameters["gplus_id"];
  StringBuffer sb = new StringBuffer();
  // Read data from request.
  context.request
  .transform(new StringDecoder())
  .listen((data) => sb.write(data), onDone: () {</p>

<pre><code>serverLogger.fine("context.request.listen.onDone = ${sb.toString()}");
Map requestData = JSON.parse(sb.toString());

Map fields = {
          "grant_type": "authorization_code",
          "code": requestData["code"],
          // http://www.riskcompletefailure.com/2013/03/postmessage-oauth-20.html
          "redirect_uri": "postmessage",
          "client_id": CLIENT_ID,
          "client_secret": CLIENT_SECRET
};

http.Client _httpClient = new http.Client();
_httpClient.post(TOKEN_ENDPOINT, fields: fields).then((http.Response response) {
  // At this point we have the token and refresh token.
  var credentials = JSON.parse(response.body);
  _httpClient.close();

  var verifyTokenUrl = '${TOKENINFO_URL}?access_token=${credentials["access_token"]}';
  new http.Client()
  ..get(verifyTokenUrl).then((http.Response response)  {
    serverLogger.fine("response = ${response.body}");

    var verifyResponse = JSON.parse(response.body);
    String userId = verifyResponse.containsKey("user_id") ? verifyResponse["user_id"] : null;
    String accessToken = credentials.containsKey("access_token") ? credentials["access_token"] : null;
    if (userId != null &amp;&amp; userId == gPlusId &amp;&amp; accessToken != null) {
      context.request.session["access_token"] = accessToken;
      context.send("POST OK");
    } else {
      context.response.statusCode = 401;
      context.send("POST FAILED ${userId} != ${gPlusId}"); 
    }
  });
});
</code></pre>

<p>  });
}
```</p>

<p>Now the HTTP session has the full ability to make calls on behalf of the user. The <code>/people</code> method will be called from the client to retrieve the list of visible friends of that user.</p>

<p>```dart
void getPeopleHandler(FukiyaContext context) {
  String accessToken = context.request.session.containsKey("access_token") ? context.request.session["access_token"] : null;
  SimpleOAuth2 simpleOAuth2 = new SimpleOAuth2()..credentials = new console_auth.Credentials(accessToken);
  plus.Plus plusclient = new plus.Plus(simpleOAuth2);
  plusclient.makeAuthRequests = true;
  plusclient.people.list("me", "visible").then((plus.PeopleFeed people) {</p>

<pre><code>serverLogger.fine("/people = $people");
context.send(people.toString());
</code></pre>

<p>  });
}
```</p>

<p>The final responsibility we can bestow upon the server is allowing the client to disconnect by revoking OAuth access.</p>

<p>```dart
void postDisconnectHandler(FukiyaContext context) {
  String tokenData = context.request.session.containsKey("access_token") ? context.request.session["access_token"] : null;
  if (tokenData == null) {</p>

<pre><code>context.response.statusCode = 401;
context.send("Current user not connected.");
return;
</code></pre>

<p>  }</p>

<p>  final String revokeTokenUrl = "${TOKEN_REVOKE_ENDPOINT}?token=${tokenData}";
  context.request.session.remove("access_token");</p>

<p>  new http.Client()..get(revokeTokenUrl).then((http.Response response) {</p>

<pre><code>context.request.session["state_token"] = _createStateToken();
Map data = {
            "state_token": context.request.session["state_token"],
            "message" : "Successfully disconnected."
            };
context.send(JSON.stringify(data));
</code></pre>

<p>  });
}
```</p>

<p>Thats about it, Happy Dart Hacking! Special thanks to <a href="https://plus.google.com/112336147904981294875">Gerwin Sturm</a> for putting together the original example for client side. Full source code can be found at <a href="https://github.com/Scarygami/gplus-quickstart-dart">gplus-quickstart-dart</a> in the server folder. Please replace your own keys cause mine will be removed at some point.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dart Multi Touch Canvas With Realtime APIs]]></title>
    <link href="http://financeCoding.github.com/blog/2013/03/21/dart-multi-touch-canvas-with-realtime-apis/"/>
    <updated>2013-03-21T18:19:00-07:00</updated>
    <id>http://financeCoding.github.com/blog/2013/03/21/dart-multi-touch-canvas-with-realtime-apis</id>
    <content type="html"><![CDATA[<p><a href="https://developers.google.com/drive/">Google</a> has made the <a href="https://developers.google.com/drive/realtime/">realtime</a> api available for developers. Realtime api provides <a href="http://en.wikipedia.org/wiki/Operational_transformation">operational transformation</a> on <a href="https://developers.google.com/drive/realtime/reference/gapi.drive.realtime.CollaborativeString">strings</a>, <a href="https://developers.google.com/drive/realtime/reference/gapi.drive.realtime.CollaborativeList">lists</a>, <a href="https://developers.google.com/drive/realtime/reference/gapi.drive.realtime.CollaborativeMap">maps</a> and custom <a href="https://developers.google.com/drive/realtime/reference/gapi.drive.realtime.CollaborativeObject">objects</a>. The application data gets stored on Google Drive and is available from any supported browser. This is going to be the tooling of the future for collaborative applications.</p>

<p>I took some time to see what it would take for implementing a sample realtime application in dart. Also wanted to make sure my sample could run on mobile chrome.</p>

<p>Since realtime api is new, dart bindings don't really exist. Lucky for us we have <a href="http://pub.dartlang.org/packages/js">js-interop</a> library. The <a href="http://pub.dartlang.org/packages/js">js-interop</a> library provides communications to existing javascript code from dart. I consider this mostly a quick hack to get started with the realtime api until a more native interface exists.</p>

<p>The sample <a href="http://financecoding.github.com/realtime_touch_canvas/web/index.html">realtime_touch_canvas</a> demonstrates a multi touch canvas surface that updates in realtime with all clients that have the application open.</p>

<iframe width="560" height="315" src="http://www.youtube.com/embed/xArfJdOb55Q" frameborder="0" allowfullscreen></iframe>


<p>Most of the heavy lifting is done by <a href="https://github.com/financeCoding/realtime_touch_canvas"><code>rtclient.dart</code></a>. I ported the <a href="https://github.com/googledrive/realtime-playground/blob/master/js/realtime-client-utils.js">code</a> from the javascript version. Its enough code to get started right away but a more structured solution should be done. The main class is <code>RealTimeLoader</code> used for realtime loading.</p>

<p>```dart
  rtl = new RealTimeLoader(clientId: 'CLIENTID.apps.googleusercontent.com', apiKey: 'KEY');
  rtl.start().then((bool isComplete) {</p>

<pre><code>/* RealTimeLoader has authenticated the application and is ready to load a file */
loadRealTimeFile(fileId, model.onFileLoaded, model.initializeModel);
</code></pre>

<p>  });
```</p>

<p><code>model.onFileLoaded</code> and <code>model.initializeModel</code> handle the creating of model data and loading of model data.</p>

<p>In the <a href="http://financecoding.github.com/realtime_touch_canvas/web/index.html">realtime_touch_canvas</a>, model data was a simple list of json strings. The ticky part here is you need to remember that your working with the realtime api within the javascript vm. So an array needs to be allocated from <a href="http://pub.dartlang.org/packages/js">js-interop</a>.</p>

<p>```dart
  void _createNewModel(js.Proxy model) {</p>

<pre><code>var list = model.createList(js.array(_defaultLines));
model.getRoot().set(_linesName, list);
</code></pre>

<p>  }
```</p>

<p>After the model is created we then get called to load the file. Loading the file for our purposes is binding the collaborative objects. Some tricky things to note here is we are retaining the javascript objects so we can access them after exit of the callback. Also the callbacks have to be wrapped within <a href="http://pub.dartlang.org/packages/js">js-interop</a> <code>js.Callback.many</code> proxy object. The callbacks <code>_linesOnAddValuesChangedEvent</code> and <code>_linesOnRemovedValuesChangedEvent</code> are fired off when the collaborative list object has items added or removed.</p>

<p>```dart
  js.Proxy <em>doc;
  String </em>linesName = "lines";
  js.Proxy _lines;</p>

<p>  void _bindModel(js.Proxy doc) {</p>

<pre><code>_doc = doc;
js.retain(_doc);
_lines = doc.getModel().getRoot().get(_linesName);
_lines.addEventListener(gapi.drive.realtime.EventType.VALUES_ADDED, new js.Callback.many(_linesOnAddValuesChangedEvent));
_lines.addEventListener(gapi.drive.realtime.EventType.VALUES_REMOVED, new js.Callback.many(_linesOnRemovedValuesChangedEvent));
js.retain(_lines);
</code></pre>

<p>  }
```</p>

<p>When the callback is called the data would be in the javascript virtual machine so we can parse it and store in our native dart code. This is more of a convenience then a must do, that way we can expose plan old dart objects to our other parts of the dart application.</p>

<p>```dart
  void _linesOnAddValuesChangedEvent(addedValue) {</p>

<pre><code>var insertedLine = _lines.get(addedValue.index);
var line = new Line.fromJson(insertedLine);
realtimeTouchCanvas.move(line, line.moveX, line.moveY);
</code></pre>

<p>  }
```</p>

<p>Now when we want to store a line in the application we simply convert it to json and push it into the collaborative list. The little tick here is to make sure we are <code>scoped</code> when accessing the <code>_lines</code> object since it lives in the javascript virtual machine.</p>

<p>```dart
  void addLine(Line line) {</p>

<pre><code>js.scoped(() {
  _lines.push(line.toJson());
});
</code></pre>

<p>  }
```</p>

<p>The <a href="http://financecoding.github.com/realtime_touch_canvas/web/index.html">realtime_touch_canvas</a> is live on github gh-pages and <a href="https://github.com/financeCoding/realtime_touch_canvas">realtime_touch_canvas source</a> is available.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[New Google Finance API Demo Released in C#]]></title>
    <link href="http://financeCoding.github.com/blog/2009/08/10/New-Google-Finance-API-Demo-Released-in-C%23/"/>
    <updated>2009-08-10T08:28:31Z</updated>
    <id>http://financeCoding.github.com/blog/2009/08/10/New-Google-Finance-API-Demo-Released-in-C#</id>
    <content type="html"><![CDATA[<p><a href="http://googlefinance.googlecode.com/files/GoogleFinanceDemo.0.0.2.zip">Download Here</a><br /><br />Added a simple application that lets you do a complete management of your <a href="http://www.google.com/finance/portfolio?action=view">Google Portfolio</a> from the command line. You can load an example S&amp;P 500 CSV file, create &amp; delete portfolios, add &amp; remove stocks, add transactions of stocks. etc.. Try it out and have fun with it, does provide a good example of how you could create your own application using the methods in <a href="http://code.google.com/p/googlefinance/source/browse/trunk/GoogleFinanceDemo/SP500/GoogleFinanceManager.cs">GoogleFinanceManager.cs</a>. You might notice I use a <a href="http://code.google.com/p/googlefinance/source/browse/trunk/GoogleFinanceDemo/SP500/YahooHelper.cs">YahooHelper.cs</a> object, this is cause Google does not yet provide a way (or one that I know of) to resolve which exchange a ticker symbol is located. Soon will be working on another example demo that will involve <a href="http://windowsclient.net/wpf/">WPF</a>. If you have any problems, questions or comments please feel free to contact me directly or leave a post. Please, if you can donate some money. Even if this project does not serve anything purposeful yet, any donations can really help.<br /><br /><br /><a id="paypalDonate" href="https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&amp;hosted_button_id=6299759"><img border="0" id="payPalImage" src="https://www.paypal.com/en_US/i/btn/btn_donateCC_LG.gif" alt="Donate to this project, it really helps a lot!" /></a><div class="blogger-post-footer"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/478539871162226053-6476881114213050129?l=financecoding.blogspot.com' alt='' /></div></p>
]]></content>
  </entry>
  
</feed>
