<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Dart | Random posts about coding]]></title>
  <link href="http://financeCoding.github.com/blog/categories/dart/atom.xml" rel="self"/>
  <link href="http://financeCoding.github.com/"/>
  <updated>2014-03-28T14:46:55-07:00</updated>
  <id>http://financeCoding.github.com/</id>
  <author>
    <name><![CDATA[Adam Singer]]></name>
    <email><![CDATA[financeCoding@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Getting started with Google Cloud Datastore and Dart]]></title>
    <link href="http://financeCoding.github.com/blog/2014/03/28/getting-started-with-google-cloud-datastore-and-dart/"/>
    <updated>2014-03-28T14:38:00-07:00</updated>
    <id>http://financeCoding.github.com/blog/2014/03/28/getting-started-with-google-cloud-datastore-and-dart</id>
    <content type="html"><![CDATA[<p><strong>NOTE: Experimental and future developments with Dart+GCE+Datastore may change</strong></p>

<p>Before running through the steps below, make sure that:</p>

<ul>
<li>You have <a href="https://developers.google.com/datastore/docs/activate">enabled</a> Google Cloud Datastore API.</li>
<li>You have your <code>&lt;project-id&gt;</code> (same identifier as your Google Cloud <a href="https://developers.google.com/datastore/docs/activate#project_id">Project ID</a>).</li>
<li>You are <a href="https://developers.google.com/compute/docs/instances#sshing">connected</a> to a Compute Engine instance with both the <code>datastore</code> and
<code>userinfo.email</code> <a href="https://developers.google.com/compute/docs/authentication#using">scopes</a> or have a <a href="https://developers.google.com/datastore/docs/activate#service_account"><service-account></a> and the <a href="https://developers.google.com/datastore/docs/activate#private_key"><path-to-private-key-file></a>.</li>
<li>You have a working local <a href="https://www.dartlang.org/tools/download.html">dart environment</a> or working <a href="#example-deployment-and-startup-scripts-for-gce-with-dart">Compute Engine instance</a></li>
</ul>


<p>In order to make API calls to the Datastore, <code>pubspec.yaml</code> file needs the following</p>

<p><code>yaml
dependencies:
  google_oauth2_client: '&gt;=0.3.6 &lt;0.3.7'
  google_datastore_v1beta2_api: "&gt;=0.4.0 &lt;0.5.0"
</code></p>

<p>Then, get the <a href="https://github.com/financeCoding/dart_datastore_example"><code>dart_datastore_example</code></a> sample:</p>

<p><code>bash
git clone https://github.com/financeCoding/dart_datastore_example.git
cd dart_datastore_example
pub install
</code></p>

<p>If you are not connected to a Compute Engine instance, make sure to run
the following commands (in a bash-like shell):</p>

<p>```bash</p>

<h1>convert the .p12 private key file to a .pem file</h1>

<h1>if asked to enter import password, use "notasecret"</h1>

<p>openssl pkcs12 -in <privatekey>.p12 -nocerts -passin pass:notasecret -nodes -out <rsa_private_key>.pem</p>

<h1>configure your credentials</h1>

<p>export DATASTORE_SERVICE_ACCOUNT=<service-account>
export DATASTORE_PRIVATE_KEY_FILE=<path-to-pem-file>
export CLOUD_PROJECT_ID=<project-id>
export CLOUD_PROJECT_NUMBER=<project-number>
```</p>

<p>Alternatively the sample allows for passing parameters via commandline:</p>

<p>```bash
cd dart_datastore_example
pub install
cd bin</p>

<h1>dart dart_datastore_example.dart <project-id> <project-number> <path-to-pem-file> <service-account></h1>

<p>dart dart_datastore_example.dart dartcloud 657648630269 privatekey.pem 657648630269-ge2he8e46y4u42bd89nmgtj52j3ilzvv@developer.gserviceaccount.com
```</p>

<p>Example output on first run:</p>

<p>```
dartcloud
657648630269
privatekey.pem
657648630269-ge2he8e46y4u42bd89nmgtj52j3ilzvv@developer.gserviceaccount.com
did not found entity</p>

<blockquote><p>entity = {question: {"stringValue":"Meaning of life?"}, answer: {"integerValue":42}}
```</p></blockquote>

<p>Example output on second run:</p>

<p>```
dartcloud
657648630269
privatekey.pem
657648630269-ge2he8e46y4u42bd89nmgtj52j3ilzvv@developer.gserviceaccount.com
found entity = {"key":{"partitionId":{"datasetId":"s~dartcloud"},"path":[{"kind":"Trivia","name":"hgtg"}]},"properties":{"question":{"stringValue":"Meaning of life?"},"answer":{"integerValue":42}}}</p>

<blockquote><p>entity = {question: {"stringValue":"Meaning of life?"}, answer: {"integerValue":42}}
```</p></blockquote>

<p>The comments in the sample's source explain its behavior in detail:</p>

<p>```dart
import "dart:io";</p>

<p>import "package:google_oauth2_client/google_oauth2_console.dart";
import "package:google_datastore_v1beta2_api/datastore_v1beta2_api_client.dart"</p>

<pre><code>as client;
</code></pre>

<p>import "package:google_datastore_v1beta2_api/datastore_v1beta2_api_console.dart"</p>

<pre><code>as console;
</code></pre>

<p>void main(List<String> args) {
  Map&lt;String, String> envVars = Platform.environment;
  String projectId = envVars['CLOUD_PROJECT_ID'] == null ?</p>

<pre><code>  args[0] : envVars['CLOUD_PROJECT_ID'];
</code></pre>

<p>  String projectNumber = envVars['CLOUD_PROJECT_NUMBER'] == null ?</p>

<pre><code>  args[1] : envVars['CLOUD_PROJECT_NUMBER'];
</code></pre>

<p>  String pemFilename = envVars['DATASTORE_PRIVATE_KEY_FILE'] == null ?</p>

<pre><code>  args[2] : envVars['DATASTORE_PRIVATE_KEY_FILE'];
</code></pre>

<p>  String serviceAccountEmail = envVars['DATASTORE_SERVICE_ACCOUNT'] == null ?</p>

<pre><code>  args[3] : envVars['DATASTORE_SERVICE_ACCOUNT'];
</code></pre>

<p>  print(projectId);
  print(projectNumber);
  print(pemFilename);
  print(serviceAccountEmail);</p>

<p>  String iss = serviceAccountEmail;
  String scopes = 'https://www.googleapis.com/auth/userinfo.email '</p>

<pre><code>  'https://www.googleapis.com/auth/datastore';
</code></pre>

<p>  String rsa_private_key_file = new File(pemFilename).readAsStringSync();</p>

<p>  ComputeOAuth2Console computeEngineClient = new ComputeOAuth2Console(</p>

<pre><code>  projectNumber, privateKey: rsa_private_key_file, iss: iss, scopes: scopes);
</code></pre>

<p>  console.Datastore datastore = new console.Datastore(computeEngineClient)
  ..makeAuthRequests = true;</p>

<p>  // Create a RPC request to begin a new transaction
  var beginTransactionRequest = new client.BeginTransactionRequest.fromJson({});
  String transaction;
  client.Key key;
  client.Entity entity;</p>

<p>  // Execute the RPC asynchronously
  datastore.datasets.beginTransaction(beginTransactionRequest, projectId).then(</p>

<pre><code>  (client.BeginTransactionResponse beginTransactionResponse) {
// Get the transaction handle from the response.
transaction = beginTransactionResponse.transaction;

// Create a RPC request to get entities by key.
var lookupRequest = new client.LookupRequest.fromJson({});

// Create a new entities by key
key = new client.Key.fromJson({});

// Set the entity key with only one `path_element`: no parent.
var path = new client.KeyPathElement.fromJson({
  'kind': 'Trivia',
  'name': 'hgtg'
});
key.path = new List&lt;client.KeyPathElement&gt;();
key.path.add(path);
lookupRequest.keys = new List&lt;client.Key&gt;();

// Add one key to the lookup request.
lookupRequest.keys.add(key);

// Set the transaction, so we get a consistent snapshot of the
// entity at the time the transaction started.
lookupRequest.readOptions = new client.ReadOptions.fromJson({
  'transaction': transaction
});

// Execute the RPC and get the response.
return datastore.datasets.lookup(lookupRequest, projectId);
</code></pre>

<p>  }).then((client.LookupResponse lookupResponse) {</p>

<pre><code>// Create a RPC request to commit the transaction.
var req = new client.CommitRequest.fromJson({});

// Set the transaction to commit.
req.transaction = transaction;

if (lookupResponse.found.isNotEmpty) {
  // Get the entity from the response if found
  entity = lookupResponse.found.first.entity;
  print("found entity = ${entity.toString()}");
} else {
  print("did not found entity");
  // If no entity was found, insert a new one in the commit request mutation.
  entity = new client.Entity.fromJson({});
  req.mutation = new client.Mutation.fromJson({});
  req.mutation.insert = new List&lt;client.Entity&gt;();
  req.mutation.insert.add(entity);

  // Copy the entity key.
  entity.key = new client.Key.fromJson(key.toJson());

  // Add two entity properties:

  // - a utf-8 string: `question`
  client.Property property = new client.Property.fromJson({});
  property.stringValue = "Meaning of life?";
  entity.properties = new Map&lt;String, client.Property&gt;();
  entity.properties['question'] = property;

  // - a 64bit integer: `answer`
  property = new client.Property.fromJson({});
  property.integerValue = 42;
  entity.properties['answer'] = property;

  // Execute the Commit RPC synchronously and ignore the response:
  // Apply the insert mutation if the entity was not found and close
  // the transaction.
  return datastore.datasets.commit(req, projectId);
}
</code></pre>

<p>  }).then((client.CommitResponse commitResponse) =></p>

<pre><code>  print("&gt; entity = ${entity.properties}"));
</code></pre>

<p>}
```</p>

<p>With this example, you learned how to use the:</p>

<ul>
<li><a href="http://pub.dartlang.org/packages/google_datastore_v1beta1_api">google_datastore_v1beta1_api</a> dart package to connect to the Datastore API.</li>
<li><a href="">beginTransaction</a> method to start a transaction.</li>
<li><a href="https://developers.google.com/datastore/docs/apis/v1beta2/datasets/lookup">lookup</a> method to retrieve entities by key from your dataset.</li>
<li><a href="https://developers.google.com/datastore/docs/apis/v1beta2/datasets/commit">commit</a> method to send mutations to entities in your dataset and commit the transaction.</li>
</ul>


<p>Now, you are ready to learn more about the <a href="https://developers.google.com/datastore/docs/concepts/">Key Datastore Concepts</a> and look at the <a href="https://developers.google.com/datastore/docs/apis/v1beta2/">JSON API reference</a>.</p>

<hr />

<h2>Example deployment and startup scripts for GCE with Dart</h2>

<p><code>setup-instance.sh</code> script creates the node with the right correct scopes and image.</p>

<p>```</p>

<h1>!/usr/bin/env bash</h1>

<p>set +o xtrace</p>

<p>USER=$USER
PROJECT=dart-compute-project
INSTANCE_NAME=dart-compute
TAGS=dart
MACHINE_TYPE=f1-micro
NETWORK=default
IP=ephemeral
IMAGE=https://www.googleapis.com/compute/v1/projects/debian-cloud/global/images/backports-debian-7-wheezy-v20140318
SCOPES=https://www.googleapis.com/auth/userinfo.email,https://www.googleapis.com/auth/compute,https://www.googleapis.com/auth/devstorage.full_control,https://www.googleapis.com/auth/datastore
PERSISTENT_BOOT_DISK=true
AUTO_DELETE_BOOT_DISK=true
ZONE=us-central1-b
STARTUP_SCRIPT=startup-script.sh
GCUTIL="gcutil --service_version=v1 --project=$PROJECT"</p>

<p>$GCUTIL addinstance $INSTANCE_NAME --tags=$TAGS --zone=$ZONE --machine_type=$MACHINE_TYPE --network=$NETWORK --external_ip_address=$IP --service_account_scopes=$SCOPES --image=$IMAGE --persistent_boot_disk=$PERSISTENT_BOOT_DISK --auto_delete_boot_disk=$AUTO_DELETE_BOOT_DISK --metadata_from_file=startup-script:$STARTUP_SCRIPT</p>

<p>rc=$?
if [[ $rc != 0 ]] ; then
  echo "Not able to add instance"</p>

<pre><code>exit $rc
</code></pre>

<p>fi
```</p>

<p><code>startup-script.sh</code> script that provisions the node with dart.</p>

<p>```</p>

<h1>!/usr/bin/env bash</h1>

<h1>Add an addtional source for the latest glibc</h1>

<p>sudo sed -i '1i deb http://ftp.us.debian.org/debian/ jessie main' /etc/apt/sources.list</p>

<h1>Update sources</h1>

<p>sudo apt-get update</p>

<h1>Download latest glibc</h1>

<p>sudo DEBIAN_FRONTEND=noninteractive apt-get -t jessie install -y libc6 libc6-dev libc6-dbg git screen unzip vim</p>

<h1>Download the latest dart sdk</h1>

<p>wget http://storage.googleapis.com/dart-archive/channels/dev/release/latest/sdk/dartsdk-linux-x64-release.zip -O dartsdk-linux-x64-release.zip</p>

<h1>Unpack the dart sdk</h1>

<p>unzip -d / dartsdk-linux-x64-release.zip</p>

<h1>Make the sdk readable</h1>

<p>chmod -R go+rx /dart-sdk</p>

<h1>Add dart bin to global path</h1>

<p>echo "export PATH=\$PATH:/dart-sdk/bin" >> /etc/profile
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[chrome.dart 0.4.0 release]]></title>
    <link href="http://financeCoding.github.com/blog/2014/01/14/chrome-dot-dart-0-dot-4-0-release/"/>
    <updated>2014-01-14T09:33:00-08:00</updated>
    <id>http://financeCoding.github.com/blog/2014/01/14/chrome-dot-dart-0-dot-4-0-release</id>
    <content type="html"><![CDATA[<p>The <a href="https://github.com/dart-gde?tab=members">dart-gde</a> has updated the <a href="https://github.com/dart-gde/chrome.dart">chrome.dart</a> to '0.4.0'. This release contains a whole rewrite of the project. All APIs are now generated from chrome apps/ext <a href="https://src.chromium.org/chrome/trunk/src/chrome/common/extensions/api">IDLs</a>. Most unit tests from previous <a href="https://github.com/dart-gde/chrome.dart">chrome.dart</a> have been ported.</p>

<h2>About chrome.dart</h2>

<p><a href="http://pub.dartlang.org/packages/chrome">chrome.dart</a> package provides the generated APIs to access chrome <a href="https://developer.chrome.com/apps/about_apps.html">apps &amp; extensions</a> through dart interfaces. The APIs depend on the <a href="https://github.com/dart-lang/js-interop">js-interop</a> to communicate with the javascript vm for accessing the APIs. Currently no native interfaces exist between dart vm and chrome browser. In a later point in time those interfaces will exist, for now this provides a way to access those interfaces.</p>

<h2>chrome_gen.dart -> chrome.dart</h2>

<p>At first <a href="https://github.com/dart-gde/chrome_gen.dart">chrome_gen.dart</a> was the project that kicked off moving to generated APIs. It was getting frustrating having to hand write, maintain and test <a href="http://pub.dartlang.org/packages/chrome">chrome.dart</a>. We did avoid looking into generation from IDL, because the IDL in the chromium is in two different formats <a href="https://src.chromium.org/chrome/trunk/src/chrome/common/extensions/api">json &amp; chrome specific WebIDL</a>. The nice part about the original <a href="https://github.com/dart-gde/chrome.dart">chrome.dart</a> package is we could introduce more structure for the APIs then what the generated javascript APIs looked like. So after initial development by <a href="https://github.com/devoncarew/">Devon Carew</a>, we decided it was a better direction to use <a href="https://github.com/dart-gde/chrome.dart/tree/master/tool">parsers and generators</a> to create and maintain the APIs. Four months later we had a 90% complete package that was already being used by a few projects, including <a href="https://github.com/dart-lang/spark">spark</a>. We are able to generate enough structure to keep nice APIs and generate form the IDL, this was a win for the project.</p>

<h2>Documentation</h2>

<p>The API documentation is automatically generated for <a href="http://dart-gde.github.io/chrome.dart/app/">Apps</a> and <a href="http://dart-gde.github.io/chrome.dart/ext/">Extensions</a> on each check in. A few wiki pages exist and we are in the process of migrating them from <a href="https://github.com/dart-gde/chrome_gen.dart/wiki">chrome_gen.dart wiki</a> -> <a href="https://github.com/dart-gde/chrome.dart/wiki">chrome.dart wiki</a>. We do need help and welcome pull requests and wiki edits.</p>

<h2>Samples</h2>

<p>Currently the best source of project setup exists with <a href="https://github.com/dart-gde/chrome.dart/tree/master/app">app</a> in the project. The <code>app</code> folder in a dart project will not have the automatic symlinks generated by <code>pub</code>. That helps out greatly since it would pollute our folder structure and cause bad things to happen. Instead we have a simple <a href="https://github.com/dart-gde/chrome.dart/blob/master/bin/setup_app.dart">setup_app.dart</a> script that helps build and copy packages over to the <code>app</code> folder. Right now its specific for the <a href="https://github.com/dart-gde/chrome.dart">chrome.dart</a> project but should be easy to replicate for your own chrome apps or extensions. Another neat script which is mac specific but could be generalized is <a href="https://github.com/dart-gde/chrome.dart/blob/master/bin/load_app.sh">load_app.sh</a>. <a href="https://github.com/dart-gde/chrome.dart/blob/master/bin/load_app.sh">load_app.sh</a> shows a simple way to load up an application in <code>app</code> folder from command line.</p>

<h2>Helping out</h2>

<p>We still need more unit tests, documentation, and additional development. If your interested checkout the <a href="https://github.com/dart-gde/chrome.dart/issues?state=open">github issues</a> or send pull requests.</p>

<h2>Thanks!</h2>

<p>To all the contributors on this project <a href="https://github.com/devoncarew">Devon Carew</a>, <a href="https://github.com/kevmoo">Kevin Moore</a>, <a href="https://github.com/rmsmith">Ross Smith</a>, <a href="https://github.com/DrMarcII">Marc Fisher</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Build and deploy dart to Beaglebone Black]]></title>
    <link href="http://financeCoding.github.com/blog/2013/11/29/build-and-deploy-dart-to-beaglebone-black/"/>
    <updated>2013-11-29T08:56:00-08:00</updated>
    <id>http://financeCoding.github.com/blog/2013/11/29/build-and-deploy-dart-to-beaglebone-black</id>
    <content type="html"><![CDATA[<p>I was looking into using <a href="https://www.dartlang.org">dart</a> on <a href="http://beagleboard.org/products/beaglebone%20black">Beaglebone Black</a> and decided it would be useful to share with others what I found.</p>

<p>After a some build hacks and patches I found a minimal working solution for Beaglebone Black with <a href="https://wiki.debian.org/ArmHardFloatPort">Debian</a> <a href="http://www.armhf.com/">ARMhf</a>. A few important notes before going down the road of building dart for ARM. The <code>dart-sdk</code> is not fully supported and pub currently might not work. <del>The <code>dartanalyzer</code> might not work</del>. The only supported <a href="http://en.wikipedia.org/wiki/List_of_ARM_cores">ARM architectures</a> are the ones that have <a href="http://en.wikipedia.org/wiki/ARMv7#32-bit_architecture">ARMv7</a> with <a href="http://en.wikipedia.org/wiki/ARM_architecture#Floating-point_.28VFP.29">VFP</a>. Don't spin your wheels trying to target any architecutre that is not <code>ARMv7</code> with VFP (minimum at the moment <code>ARMv7-A</code>) unless you plan on implementing the routines needed in the runtime <a href="https://code.google.com/p/dart/source/browse/branches/bleeding_edge/dart/runtime/vm/assembler_arm.cc">arm assembler</a>. If you do plan on implementing them, well thats just pure awesome!</p>

<p>```cpp assembler_arm.cc
void CPUFeatures::InitOnce() {</p>

<h1>if defined(USING_SIMULATOR)</h1>

<p>  integer_division_supported<em> = true;
  neon_supported</em> = true;</p>

<h1>else</h1>

<p>  ASSERT(CPUInfoContainsString("ARMv7"));  // Implements ARMv7.
  ASSERT(CPUInfoContainsString("vfp"));  // Has floating point unit.
  // Has integer division.
  if (CPUInfoContainsString("QCT APQ8064")) {</p>

<pre><code>// Special case for Qualcomm Krait CPUs in Nexus 4 and 7.
integer_division_supported_ = true;
</code></pre>

<p>  } else {</p>

<pre><code>integer_division_supported_ = CPUInfoContainsString("idiva");
</code></pre>

<p>  }
  neon_supported_ = CPUInfoContainsString("neon");</p>

<h1>endif  // defined(USING_SIMULATOR)</h1>

<h1>if defined(DEBUG)</h1>

<p>  initialized_ = true;</p>

<h1>endif</h1>

<p>}
```</p>

<h3>Download <a href="http://releases.ubuntu.com/precise/">Ubuntu 12.04.3 LTS</a></h3>

<p>Download the desktop iso to install on VirtualBox.</p>

<h3>Install on <a href="https://www.virtualbox.org/">VirtualBox</a></h3>

<p>I work mostly on mac so Ubuntu installed on VirtualBox was needed to help with cross compiling and flashing of uSD cards.</p>

<h3>Update the packages</h3>

<p>Just to be safe update any Ubuntu packages before installing the development software.</p>

<h3>Install basic packages</h3>

<p>I typically use the git <a href="https://code.google.com/p/dart/wiki/GettingTheSource#Using_Git">overlay</a> on subversion when working with the dart repo. The java jre/jdk is required for building the dart_analyzer which does not work in the sdk.</p>

<p>```bash shell</p>

<h1>Install subversion</h1>

<p>sudo apt-get install subversion git git-svn openssh-server vim default-jre default-jdk
```</p>

<h3>Install the chrome build and arm dependencies</h3>

<p>Checkout the latest build tools scripts. The following scripts prep your system with any packages needed for building dart.</p>

<p>```bash shell</p>

<h1>checkout build scripts</h1>

<p>svn co http://src.chromium.org/chrome/trunk/src/build; cd build</p>

<h1>install dependencies</h1>

<p>chmod u+x install-build-deps.sh
./install-build-deps.sh --no-chromeos-fonts
./install-build-deps.sh --no-chromeos-fonts --arm
```</p>

<h3>Install addtional libraries</h3>

<p>The following libraries are needed for building dart but might not be included from the chrome build tool scripts.</p>

<p>```bash shell</p>

<h1>Install addtional libs</h1>

<p>sudo apt-get install libc6-dev-i386 g++-multilib
```</p>

<h3>Install depot-tools</h3>

<p><a href="http://www.chromium.org/developers/how-tos/depottools">depot-tools</a> is required for hacking out the dart source code.</p>

<p>```bash shell</p>

<h1>depot tools</h1>

<p>svn co http://src.chromium.org/svn/trunk/tools/depot_tools
export PATH=$PATH:<code>pwd</code>//depot_tools
```</p>

<h3>Checkout the dart code base</h3>

<p>You dont need to include <code>--username &lt;YOUR USERNAME&gt;</code> unless you plan on creating a CL for review.</p>

<p><code>bash shell
mkdir dart_bleeding
cd dart_bleeding
svn ls https://dart.googlecode.com/svn/branches/bleeding_edge/ --username &lt;YOUR USERNAME&gt;
gclient config https://dart.googlecode.com/svn/branches/bleeding_edge/deps/all.deps
git svn clone -rHEAD https://dart.googlecode.com/svn/branches/bleeding_edge/dart dart
gclient sync
gclient runhooks
</code></p>

<h3>Patch the gyp and version files</h3>

<p>A git patch can be found here <a href="https://gist.github.com/financeCoding/7725354">7725354</a>, that patches the build scripts to support building the <code>dart-sdk</code> for ARM. Patching the <code>VERSION</code> file was done in an attempt to get pub working. At the moment its not required. If not done then an old version number is baked into the dartvm. This patch also modifies which dartvm creates the snapshots for <code>pub</code>, <code>dart2js</code> and a wrapper util. Patch creates the requirement of having to build the dartvm for x64 before building the <code>dart-sdk</code> for ARM. The dart build scripts have a funky dependency of wanting to use the dartvm target to create the snapshot files. Which in this case wont work since our dartvm is an ARM target being built on x64.</p>

<p>```diff arm.build.patch
diff --git a/tools/VERSION b/tools/VERSION
index d1ab212..0d6101d 100644
--- a/tools/VERSION
+++ b/tools/VERSION
@@ -1,5 +1,5 @@
 CHANNEL be
-MAJOR 0
-MINOR 1
-BUILD 2
-PATCH 0
+MAJOR 1
+MINOR 0
+BUILD 0
+PATCH 7
diff --git a/utils/compiler/compiler.gyp b/utils/compiler/compiler.gyp
index 294c7e9..5f3754a 100644
--- a/utils/compiler/compiler.gyp
+++ b/utils/compiler/compiler.gyp
@@ -18,7 +18,7 @@</p>

<pre><code>     {
       'action_name': 'generate_snapshots',
       'inputs': [
</code></pre>

<ul>
<li><pre><code>     '&lt;(PRODUCT_DIR)/&lt;(EXECUTABLE_PREFIX)dart&lt;(EXECUTABLE_SUFFIX)',
</code></pre></li>
<li><pre><code>     '&lt;(PRODUCT_DIR)/../DebugX64/dart',
     '../../sdk/lib/_internal/libraries.dart',
     '&lt;!@(["python", "../../tools/list_files.py", "\\.dart$", "../../sdk/lib/_internal/compiler", "../../runtime/lib", "../../sdk/lib/_internal/dartdoc"])',
     'create_snapshot.dart',
</code></pre>

@@ -30,7 +30,7 @@

<pre><code>     '&lt;(SHARED_INTERMEDIATE_DIR)/dart2js.dart.snapshot',
   ],
   'action': [
</code></pre></li>
<li><pre><code>     '&lt;(PRODUCT_DIR)/&lt;(EXECUTABLE_PREFIX)dart&lt;(EXECUTABLE_SUFFIX)',
</code></pre></li>
<li><pre><code>     '&lt;(PRODUCT_DIR)/../DebugX64/dart',
     'create_snapshot.dart',
     '--output_dir=&lt;(SHARED_INTERMEDIATE_DIR)',
     '--dart2js_main=sdk/lib/_internal/compiler/implementation/dart2js.dart',
</code></pre>

diff --git a/utils/pub/pub.gyp b/utils/pub/pub.gyp
index fd5e147..ab2e243 100644
--- a/utils/pub/pub.gyp
+++ b/utils/pub/pub.gyp
@@ -25,7 +25,7 @@

<pre><code>     '&lt;(SHARED_INTERMEDIATE_DIR)/pub.dart.snapshot',
   ],
   'action': [
</code></pre></li>
<li><pre><code>     '&lt;(PRODUCT_DIR)/&lt;(EXECUTABLE_PREFIX)dart&lt;(EXECUTABLE_SUFFIX)',
</code></pre></li>
<li><pre><code>     '&lt;(PRODUCT_DIR)/../DebugX64/dart',
     '--package-root=&lt;(PRODUCT_DIR)/packages/',
     '--snapshot=&lt;(SHARED_INTERMEDIATE_DIR)/pub.dart.snapshot',
     '../../sdk/lib/_internal/pub/bin/pub.dart',
</code></pre>

<p>```</p></li>
</ul>


<h3>Build the <code>dart-sdk</code></h3>

<p>Building of the <code>dart-sdk</code> for ARM target is a two stop process. First build x64 so we can use that dartvm to generate the snapshot files. Then the second step is running the <code>create_sdk</code> build for ARM. When the build is finished the <code>out/ReleaseARM/dart-sdk</code> should contain a full <code>dart-sdk</code> build. <del>Keep in mind this does build the <code>dartanalyzer</code> but it may not work on ARM.</del></p>

<p>```bash shell</p>

<h1>build a target for your native system to create the snapshot files.</h1>

<p>./tools/build.py -m debug -v -a x64 -j 8</p>

<h1>build the arm target</h1>

<p>./tools/build.py -m release -v -a arm -j 8 create_sdk
```</p>

<h3>Tarball the sdk</h3>

<p>Package up the <code>dart-sdk</code> as a tarball to distribute.</p>

<p><code>bash shell
cd ./out/ReleaseARM/
tar -czvf dart-sdk.tar.gz dart-sdk
</code></p>

<h3>Install <a href="http://www.armhf.com/index.php/boards/beaglebone-black/#wheezy">Debian Wheezy 7.2 Hard Float Minimal Image</a> on Beaglebone Black</h3>

<p>In virtualbox with a uSD card at <code>/dev/sdX</code> the following will download an image and write to the uSD card. Updated images can be found at <a href="http://www.armhf.com/index.php/boards/beaglebone-black/#wheezy">armhf</a></p>

<p><code>bash shell
wget http://s3.armhf.com/debian/wheezy/bone/debian-wheezy-7.2-armhf-3.8.13-bone30.img.xz
xz -cd debian-wheezy-7.2-armhf-3.8.13-bone30.img.xz &gt; /dev/sdX
</code></p>

<p>Then insert the uSD card into the Beaglebone Black and boot the image by holding down the boot switch and powering on.</p>

<p><img src="http://elinux.org/images/7/76/CONN_REVA5A.jpg"></p>

<p>Write the booted image to the eMMC.</p>

<p><code>bash shell
xz -cd debian-wheezy-7.2-armhf-3.8.13-bone30.img.xz &gt; /dev/mmcblk1
</code></p>

<p>Power down and remove the uSD card.</p>

<h3>Update glibc on the BeagleBone Black</h3>

<p>Updating glibc is required cause the version of glibc installed from the chromium build scripts is greater then the one shipped with Wheezy 7.2. The following commands update glibc.</p>

<p>```bash shell</p>

<h1>Add an addtional source for the latest glibc</h1>

<p>sudo sed -i '1i deb http://ftp.us.debian.org/debian/ jessie main' /etc/apt/sources.list</p>

<h1>Update sources</h1>

<p>sudo apt-get update</p>

<h1>Download latest glibc</h1>

<p>sudo DEBIAN_FRONTEND=noninteractive apt-get -t jessie install -y libc6 libc6-dev libc6-dbg git screen
```</p>

<h3>Copy over <code>dart-sdk</code></h3>

<p>From virtual box copy over the tarball to Beaglebone Black running debian.</p>

<p><code>bash shell
scp dart-sdk.tar.gz debian@192.168.2.2:~/
</code></p>

<p>After the tarball is copied, uncompress and add to your <code>PATH</code>.</p>

<p><code>bash shell
tar -zxvf dart-sdk.tar.gz
export PATH=~/dart-sdk:$PATH
dart --version
Dart VM version: 1.0.0.7_r30634_adam (Fri Nov 29 01:14:42 2013) on "linux_arm"
</code></p>

<h3>Known issues at the moment</h3>

<p>Pub does not work, issue could be followed at <a href="https://code.google.com/p/dart/issues/detail?id=15383">15383</a>. I was testing this out while staying at a hotel so some proxy settings might of been blocking or tripping up pub.</p>

<h3>Feedback</h3>

<p>If you have a better way of running dart on Beagleblone Black I would love to hear it! Please contact me on <a href="https://plus.google.com/104569492481999771226/">g+</a> and lets discuss.</p>

<h3>Update on <code>dartanalyzer</code></h3>

<p><code>dartanalyzer</code> will work after installing the <code>default-jre</code> on Beaglebone Black.</p>

<p><code>bash shell
sudo apt-get install default-jre
</code></p>

<h3>Addtional resources</h3>

<ul>
<li><a href="https://github.com/financeCoding/dart_bleeding">dart_bleeding</a> contains some scripts I typically use for this entire process.</li>
<li><a href="https://code.google.com/p/dart/wiki/PreparingYourMachine">PreparingYourMachine</a> resources for preping your machine to build from source</li>
<li><a href="https://code.google.com/p/dart/wiki/GettingTheSource">GettingTheSource</a> getting the source code documentation</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[google client apis new release 0.4.x]]></title>
    <link href="http://financeCoding.github.com/blog/2013/10/22/google-client-apis-new-release-0-dot-4-x/"/>
    <updated>2013-10-22T19:34:00-07:00</updated>
    <id>http://financeCoding.github.com/blog/2013/10/22/google-client-apis-new-release-0-dot-4-x</id>
    <content type="html"><![CDATA[<p>The <a href="https://github.com/dart-gde?tab=members">dart-gde</a> team has updated the <a href="https://github.com/dart-google-apis">google client apis</a> to <code>'&gt;=0.4.0'</code>. Along with this change was an update for <a href="http://pub.dartlang.org/packages/google_oauth2_client">Google OAuth2 Client</a> to <code>'&gt;=0.3.0'</code>.</p>

<h2>The breaking changes for <a href="http://pub.dartlang.org/packages/google_oauth2_client">Google OAuth2 Client</a></h2>

<ul>
<li>SystemCache has been removed.</li>
<li><code>GoogleOAuth2.ensureAuthenticated()</code> A much cleaner impl that eliminates the need to pass in a HttpRequest object to authenticate.</li>
<li>All dependencies bumped to latest versions.</li>
<li>Code refactored.</li>
<li>Dead code eliminated.</li>
<li>Remove deprecated libraries.</li>
<li>Heavy logging removed.</li>
</ul>


<h2>The breaking changes for generated <a href="https://github.com/dart-google-apis">google client apis</a> include</h2>

<ul>
<li>Renamed <code>lib/src/{cloud_api.dart -&gt; client_base.dart}</code> <code>lib/src/{cloud_api_console.dart -&gt; console_client.dart}</code> <code>lib/src/{cloud_api_browser.dart -&gt; browser_client.dart}</code>.</li>
<li><code>ClientBase.responseParse(int statusCode, String responseBody)</code> introduced and handles parsing <code>responseBody</code>. <code>responseParse</code> will throw <code>DetailedApiRequestError</code> if the body has an error.</li>
<li>Renamed <code>APIRequestException</code> -> <code>APIRequestError</code>.</li>
<li>Remove deprecated libraries.</li>
</ul>


<h2>Updating requires a small change in <code>pubspec.yaml</code></h2>

<p><code>yaml pubspec.yaml
dependencies:
  google_plus_v1_api: '&gt;=0.4.0'
</code></p>

<p>A small collection of demo examples could be found at <a href="https://github.com/dart-gde/dart_api_client_examples">dart_api_client_examples</a>.</p>

<h2>Full list of available Google client apis on <a href="http://pub.dartlang.org">pub.dartlang.org</a></h2>

<ul>
<li><a href="http://pub.dartlang.org/packages/dart_adexchangebuyer_v1_api_client">dart_adexchangebuyer_v1_api_client</a></li>
<li><a href="http://pub.dartlang.org/packages/dart_adexchangebuyer_v1_1_api_client">dart_adexchangebuyer_v1_1_api_client</a></li>
<li><a href="http://pub.dartlang.org/packages/dart_adexchangebuyer_v1_2_api_client">dart_adexchangebuyer_v1_2_api_client</a></li>
<li><a href="http://pub.dartlang.org/packages/dart_adexchangebuyer_v1_3_api_client">dart_adexchangebuyer_v1_3_api_client</a></li>
<li><a href="http://pub.dartlang.org/packages/dart_adexchangeseller_v1_api_client">dart_adexchangeseller_v1_api_client</a></li>
<li><a href="http://pub.dartlang.org/packages/dart_adexchangeseller_v1_1_api_client">dart_adexchangeseller_v1_1_api_client</a></li>
<li><a href="http://pub.dartlang.org/packages/dart_admin_directory_v1_api_client">dart_admin_directory_v1_api_client</a></li>
<li><a href="http://pub.dartlang.org/packages/dart_admin_email_migration_v2_api_client">dart_admin_email_migration_v2_api_client</a></li>
<li><a href="http://pub.dartlang.org/packages/dart_admin_reports_v1_api_client">dart_admin_reports_v1_api_client</a></li>
<li><a href="http://pub.dartlang.org/packages/dart_adsense_v1_2_api_client">dart_adsense_v1_2_api_client</a></li>
<li><a href="http://pub.dartlang.org/packages/dart_adsense_v1_3_api_client">dart_adsense_v1_3_api_client</a></li>
<li><a href="http://pub.dartlang.org/packages/dart_adsensehost_v4_1_api_client">dart_adsensehost_v4_1_api_client</a></li>
<li><a href="http://pub.dartlang.org/packages/dart_analytics_v2_4_api_client">dart_analytics_v2_4_api_client</a></li>
<li><a href="http://pub.dartlang.org/packages/dart_analytics_v3_api_client">dart_analytics_v3_api_client</a></li>
<li><a href="http://pub.dartlang.org/packages/dart_androidpublisher_v1_api_client">dart_androidpublisher_v1_api_client</a></li>
<li><a href="http://pub.dartlang.org/packages/dart_androidpublisher_v1_1_api_client">dart_androidpublisher_v1_1_api_client</a></li>
<li><a href="http://pub.dartlang.org/packages/dart_appstate_v1_api_client">dart_appstate_v1_api_client</a></li>
<li><a href="http://pub.dartlang.org/packages/dart_audit_v1_api_client">dart_audit_v1_api_client</a></li>
<li><a href="http://pub.dartlang.org/packages/dart_bigquery_v2_api_client">dart_bigquery_v2_api_client</a></li>
<li><a href="http://pub.dartlang.org/packages/dart_blogger_v2_api_client">dart_blogger_v2_api_client</a></li>
<li><a href="http://pub.dartlang.org/packages/dart_blogger_v3_api_client">dart_blogger_v3_api_client</a></li>
<li><a href="http://pub.dartlang.org/packages/dart_books_v1_api_client">dart_books_v1_api_client</a></li>
<li><a href="http://pub.dartlang.org/packages/dart_calendar_v3_api_client">dart_calendar_v3_api_client</a></li>
<li><a href="http://pub.dartlang.org/packages/dart_civicinfo_us_v1_api_client">dart_civicinfo_us_v1_api_client</a></li>
<li><a href="http://pub.dartlang.org/packages/dart_compute_v1beta15_api_client">dart_compute_v1beta15_api_client</a></li>
<li><a href="http://pub.dartlang.org/packages/dart_compute_v1beta16_api_client">dart_compute_v1beta16_api_client</a></li>
<li><a href="http://pub.dartlang.org/packages/dart_coordinate_v1_api_client">dart_coordinate_v1_api_client</a></li>
<li><a href="http://pub.dartlang.org/packages/dart_customsearch_v1_api_client">dart_customsearch_v1_api_client</a></li>
<li><a href="http://pub.dartlang.org/packages/dart_datastore_v1beta1_api_client">dart_datastore_v1beta1_api_client</a></li>
<li><a href="http://pub.dartlang.org/packages/dart_datastore_v1beta2_api_client">dart_datastore_v1beta2_api_client</a></li>
<li><a href="http://pub.dartlang.org/packages/dart_dfareporting_v1_api_client">dart_dfareporting_v1_api_client</a></li>
<li><a href="http://pub.dartlang.org/packages/dart_dfareporting_v1_1_api_client">dart_dfareporting_v1_1_api_client</a></li>
<li><a href="http://pub.dartlang.org/packages/dart_dfareporting_v1_2_api_client">dart_dfareporting_v1_2_api_client</a></li>
<li><a href="http://pub.dartlang.org/packages/dart_dfareporting_v1_3_api_client">dart_dfareporting_v1_3_api_client</a></li>
<li><a href="http://pub.dartlang.org/packages/dart_discovery_v1_api_client">dart_discovery_v1_api_client</a></li>
<li><a href="http://pub.dartlang.org/packages/dart_doubleclickbidmanager_v1_api_client">dart_doubleclickbidmanager_v1_api_client</a></li>
<li><a href="http://pub.dartlang.org/packages/dart_doubleclicksearch_v2_api_client">dart_doubleclicksearch_v2_api_client</a></li>
<li><a href="http://pub.dartlang.org/packages/dart_drive_v1_api_client">dart_drive_v1_api_client</a></li>
<li><a href="http://pub.dartlang.org/packages/dart_drive_v2_api_client">dart_drive_v2_api_client</a></li>
<li><a href="http://pub.dartlang.org/packages/dart_freebase_v1_sandbox_api_client">dart_freebase_v1_sandbox_api_client</a></li>
<li><a href="http://pub.dartlang.org/packages/dart_freebase_v1sandbox_api_client">dart_freebase_v1sandbox_api_client</a></li>
<li><a href="http://pub.dartlang.org/packages/dart_freebase_v1_api_client">dart_freebase_v1_api_client</a></li>
<li><a href="http://pub.dartlang.org/packages/dart_fusiontables_v1_api_client">dart_fusiontables_v1_api_client</a></li>
<li><a href="http://pub.dartlang.org/packages/dart_games_v1_api_client">dart_games_v1_api_client</a></li>
<li><a href="http://pub.dartlang.org/packages/dart_gamesmanagement_v1management_api_client">dart_gamesmanagement_v1management_api_client</a></li>
<li><a href="http://pub.dartlang.org/packages/dart_gan_v1beta1_api_client">dart_gan_v1beta1_api_client</a></li>
<li><a href="http://pub.dartlang.org/packages/dart_groupsmigration_v1_api_client">dart_groupsmigration_v1_api_client</a></li>
<li><a href="http://pub.dartlang.org/packages/dart_groupssettings_v1_api_client">dart_groupssettings_v1_api_client</a></li>
<li><a href="http://pub.dartlang.org/packages/dart_identitytoolkit_v3_api_client">dart_identitytoolkit_v3_api_client</a></li>
<li><a href="http://pub.dartlang.org/packages/dart_licensing_v1_api_client">dart_licensing_v1_api_client</a></li>
<li><a href="http://pub.dartlang.org/packages/dart_mirror_v1_api_client">dart_mirror_v1_api_client</a></li>
<li><a href="http://pub.dartlang.org/packages/dart_oauth2_v1_api_client">dart_oauth2_v1_api_client</a></li>
<li><a href="http://pub.dartlang.org/packages/dart_oauth2_v2_api_client">dart_oauth2_v2_api_client</a></li>
<li><a href="http://pub.dartlang.org/packages/dart_orkut_v2_api_client">dart_orkut_v2_api_client</a></li>
<li><a href="http://pub.dartlang.org/packages/dart_pagespeedonline_v1_api_client">dart_pagespeedonline_v1_api_client</a></li>
<li><a href="http://pub.dartlang.org/packages/dart_plus_v1_api_client">dart_plus_v1_api_client</a></li>
<li><a href="http://pub.dartlang.org/packages/dart_plusdomains_v1_api_client">dart_plusdomains_v1_api_client</a></li>
<li><a href="http://pub.dartlang.org/packages/dart_prediction_v1_2_api_client">dart_prediction_v1_2_api_client</a></li>
<li><a href="http://pub.dartlang.org/packages/dart_prediction_v1_3_api_client">dart_prediction_v1_3_api_client</a></li>
<li><a href="http://pub.dartlang.org/packages/dart_prediction_v1_4_api_client">dart_prediction_v1_4_api_client</a></li>
<li><a href="http://pub.dartlang.org/packages/dart_prediction_v1_5_api_client">dart_prediction_v1_5_api_client</a></li>
<li><a href="http://pub.dartlang.org/packages/dart_prediction_v1_6_api_client">dart_prediction_v1_6_api_client</a></li>
<li><a href="http://pub.dartlang.org/packages/dart_reseller_v1sandbox_api_client">dart_reseller_v1sandbox_api_client</a></li>
<li><a href="http://pub.dartlang.org/packages/dart_reseller_v1_api_client">dart_reseller_v1_api_client</a></li>
<li><a href="http://pub.dartlang.org/packages/dart_shopping_v1_api_client">dart_shopping_v1_api_client</a></li>
<li><a href="http://pub.dartlang.org/packages/dart_siteverification_v1_api_client">dart_siteverification_v1_api_client</a></li>
<li><a href="http://pub.dartlang.org/packages/dart_sqladmin_v1beta1_api_client">dart_sqladmin_v1beta1_api_client</a></li>
<li><a href="http://pub.dartlang.org/packages/dart_storage_v1beta1_api_client">dart_storage_v1beta1_api_client</a></li>
<li><a href="http://pub.dartlang.org/packages/dart_storage_v1beta2_api_client">dart_storage_v1beta2_api_client</a></li>
<li><a href="http://pub.dartlang.org/packages/dart_taskqueue_v1beta1_api_client">dart_taskqueue_v1beta1_api_client</a></li>
<li><a href="http://pub.dartlang.org/packages/dart_taskqueue_v1beta2_api_client">dart_taskqueue_v1beta2_api_client</a></li>
<li><a href="http://pub.dartlang.org/packages/dart_tasks_v1_api_client">dart_tasks_v1_api_client</a></li>
<li><a href="http://pub.dartlang.org/packages/dart_translate_v2_api_client">dart_translate_v2_api_client</a></li>
<li><a href="http://pub.dartlang.org/packages/dart_urlshortener_v1_api_client">dart_urlshortener_v1_api_client</a></li>
<li><a href="http://pub.dartlang.org/packages/dart_webfonts_v1_api_client">dart_webfonts_v1_api_client</a></li>
<li><a href="http://pub.dartlang.org/packages/dart_youtube_v3_api_client">dart_youtube_v3_api_client</a></li>
<li><a href="http://pub.dartlang.org/packages/dart_youtubeanalytics_v1_api_client">dart_youtubeanalytics_v1_api_client</a></li>
<li><a href="http://pub.dartlang.org/packages/dart_youtubeanalytics_v1beta1_api_client">dart_youtubeanalytics_v1beta1_api_client</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting Started with Dart on Compute Engine]]></title>
    <link href="http://financeCoding.github.com/blog/2013/09/30/getting-started-with-dart-on-compute-engine/"/>
    <updated>2013-09-30T20:41:00-07:00</updated>
    <id>http://financeCoding.github.com/blog/2013/09/30/getting-started-with-dart-on-compute-engine</id>
    <content type="html"><![CDATA[<p>Quick how-to on using <a href="http://www.dartlang.org">dart</a> with <a href="https://cloud.google.com/products/compute-engine">Compute Engine</a>. If not aware, right now is a great time to dive into Compute Engine cause google is giving away $2,000 worth of <a href="https://plus.google.com/111783114889748547827/posts/Bou747dCfNb">credits</a> to individuals interested in trying it out. I've been using it for about 2-3 months now and totally love it.</p>

<p>What peeked my interest is it was flexable enough to run the dartvm as a server with minimal configuration. The one configuration hurdle was dependency of <code>GLIBC &gt;= 2.15</code> in the dartvm binaries. The good news is with a simple startup script the compute engine instance can be provisioned to support the latest linux <a href="https://storage.googleapis.com/dart-editor-archive-integration/latest/dartsdk-linux-64.tar.gz">dart-sdk</a>.</p>

<p>The main tool we will use to provision a compute engine instance is <a href="https://developers.google.com/compute/docs/gcutil/">gcutil</a>. We could of used dartvm and <a href="http://pub.dartlang.org/packages/google_compute_v1beta15_api">google_compute_v1beta15_api</a> but will save that for a later post.</p>

<p>After signing up for <a href="https://cloud.google.com/products/compute-engine">Compute Engine</a> the next step should be to download and configure <code>gcutil</code>.</p>

<p><code>bash
$ wget https://google-compute-engine-tools.googlecode.com/files/gcutil-1.8.4.tar.gz
$ tar xzvpf gcutil-1.8.4.tar.gz -C $HOME
$ export PATH=./gcutil-1.8.4:$PATH
$ gcutil version
1.8.4
</code></p>

<p>Next we want to create a <code>startup.sh</code> script that will be deployed to the compute engine instance. The script is a simple way to run additional commands to provision the instance. For dart we need to add a new <code>deb</code> source, update sources, install dependencies, fetch &amp; unpack dart-sdk, and then execute our dart server. In the final line of the <code>startup.sh</code> script the command will create a dart server from the user account tied to this compute instance. Simply we clone a public git repo, install pub dependencies and screen a detached session that runs the dart server. This is not a very fancy way to deploy dart but a simple and quick way to get something running with no troubles. A real life deployment might include some trendy fab/chef/puppet combo.</p>

<p>```bash startup.sh</p>

<h1>!/usr/bin/env bash</h1>

<h1>Add an addtional source for the latest glibc</h1>

<p>sudo sed -i '1i deb http://ftp.us.debian.org/debian/ jessie main' /etc/apt/sources.list</p>

<h1>Update sources</h1>

<p>sudo apt-get update</p>

<h1>Download latest glibc</h1>

<p>sudo DEBIAN_FRONTEND=noninteractive apt-get -t jessie install -y libc6 libc6-dev libc6-dbg git screen</p>

<h1>Download the latest dart sdk</h1>

<p>wget https://storage.googleapis.com/dart-editor-archive-integration/latest/dartsdk-linux-64.tar.gz -O /dartsdk-linux-64.tar.gz</p>

<h1>Unpack the dart sdk</h1>

<p>tar -zxvf /dartsdk-linux-64.tar.gz -C /</p>

<p>su - financeCoding -c 'ls -al &amp;&amp; cd ~ &amp;&amp; pwd &amp;&amp; git clone https://github.com/rikulo/stream.git &amp;&amp; /dart-sdk/bin/dart --version &amp;&amp; cd stream &amp;&amp; /dart-sdk/bin/dart --version &amp;&amp; /dart-sdk/bin/pub install &amp;&amp; cd example/hello-static &amp;&amp; screen -d -m /dart-sdk/bin/dart webapp/main.dart'
```</p>

<p>After we have the <code>startup.sh</code> script we then create another deployment script. The following script will be the gcutil commands needed to actually create and provision the compute instance. The last part of our script includes a firewall rule for the port that the <a href="https://github.com/rikulo/stream">stream</a> sample is running on. Without proper firewall rules no access from the outside is possible.</p>

<p>```bash deploy-dart-compute.sh</p>

<h1>!/usr/bin/env bash</h1>

<p>set +o xtrace</p>

<p>USER=financeCoding
PROJECT=dart-compute-project
INSTANCE_NAME=dart-compute
TAGS=dart
MACHINE_TYPE=g1-small
NETWORK=default
IP=ephemeral
IMAGE=https://www.googleapis.com/compute/v1beta15/projects/debian-cloud/global/images/debian-7-wheezy-v20130816
SCOPES=https://www.googleapis.com/auth/userinfo.email,https://www.googleapis.com/auth/compute,https://www.googleapis.com/auth/devstorage.full_control
PERSISTENT_BOOT_DISK=true
ZONE=us-central1-b
STARTUP_SCRIPT=startup.sh
GCUTIL="gcutil --service_version=v1beta15 --project=$PROJECT"</p>

<p>$GCUTIL addinstance $INSTANCE_NAME --tags=$TAGS --zone=$ZONE --machine_type=$MACHINE_TYPE --network=$NETWORK --external_ip_address=$IP --service_account_scopes=$SCOPES --image=$IMAGE --persistent_boot_disk=$PERSISTENT_BOOT_DISK --metadata_from_file=startup-script:$STARTUP_SCRIPT</p>

<p>rc=$?
if [[ $rc != 0 ]] ; then</p>

<pre><code>echo "Not able to add instance"
exit $rc
</code></pre>

<p>fi</p>

<p>$GCUTIL addfirewall $INSTANCE_NAME --allowed "tcp:8080"</p>

<p>rc=$?
if [[ $rc != 0 ]] ; then</p>

<pre><code>echo "Not able to provision firewall or has already been provisioned"
exit $rc
</code></pre>

<p>fi</p>

<p>exit $rc
```</p>

<p><a href="/images/2013-09-30-getting-started-with-dart-on-compute-engine/compute-engine-console.png"><img src="/images/2013-09-30-getting-started-with-dart-on-compute-engine/compute-engine-console.png" alt="compute-engine-console" /></a></p>

<p><a href="/images/2013-09-30-getting-started-with-dart-on-compute-engine/stream-client.png"><img src="/images/2013-09-30-getting-started-with-dart-on-compute-engine/stream-client.png" alt="stream-client" /></a></p>

<p>And thats all that is needed to get dart on compute engine in two easy steps. The code can be found here <a href="https://gist.github.com/financeCoding/6789537">gist</a>.</p>
]]></content>
  </entry>
  
</feed>
