<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: DartEditor | Random posts about coding]]></title>
  <link href="http://financeCoding.github.com/blog/categories/darteditor/atom.xml" rel="self"/>
  <link href="http://financeCoding.github.com/"/>
  <updated>2014-03-28T14:38:33-07:00</updated>
  <id>http://financeCoding.github.com/</id>
  <author>
    <name><![CDATA[Adam Singer]]></name>
    <email><![CDATA[financeCoding@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Dart: Using prefix for #import]]></title>
    <link href="http://financeCoding.github.com/blog/2012/01/14/dart-using-prefix-for-import/"/>
    <updated>2012-01-14T00:00:00-08:00</updated>
    <id>http://financeCoding.github.com/blog/2012/01/14/dart-using-prefix-for-import</id>
    <content type="html"><![CDATA[<p>Using "prefix" is great for managing how your application references libraries in Dart. At the moment Dart is still in alpha so this exact method or style may change at some later date. From the <a href="http://www.dartlang.org/docs/spec/dartLangSpec.pdf">Language Specification (0.06)</a> Libraries have a very simple definition.</p>

<blockquote>A library consists of (a possibly empty) set of imports, and a set of top level
declarations. A top level declaration is either a class (7), an interface (8), a type
declaration, a function (6) or a variable declaration (5).</blockquote>


<p>Lets dive in and create one main application and one cipher application that will be a library.
<a href="http://financecoding.files.wordpress.com/2012/01/screen-shot-2012-01-14-at-9-02-05-am.png"><img src="http://financecoding.files.wordpress.com/2012/01/screen-shot-2012-01-14-at-9-02-05-am.png" alt="" title="Screen Shot 2012-01-14 at 9.02.05 AM" width="579" height="399" class="alignnone size-full wp-image-337" /></a></p>

<p>Now if we #import CipherLib from filesystem path into our MainApplication both main functions should conflict.
<a href="http://financecoding.files.wordpress.com/2012/01/screen-shot-2012-01-14-at-9-04-27-am.png"><img src="http://financecoding.files.wordpress.com/2012/01/screen-shot-2012-01-14-at-9-04-27-am.png" alt="" title="Screen Shot 2012-01-14 at 9.04.27 AM" width="384" height="158" class="alignnone size-full wp-image-338" /></a></p>

<p>Why this happens is clearly defined in the specification.</p>

<blockquote>Imports assume a global namespace of libraries (at least per isolate). They also assume the library is in control, rather than the other way around. It is a compile-time error if a name N is introduced into the library scope of a library A, and either: N is declared by A, OR Another import introduces N into the scope of A. This implies that it is a load-time error for a library to import itself, as the names of its members will be duplicated.</blockquote>


<p>The MainAppication can be adjusted by adding the prefix parameter to the #import declaration. Now from the prefixed name we can call the main method.
<a href="http://financecoding.files.wordpress.com/2012/01/screen-shot-2012-01-14-at-9-13-08-am.png"><img src="http://financecoding.files.wordpress.com/2012/01/screen-shot-2012-01-14-at-9-13-08-am.png" alt="" title="Screen Shot 2012-01-14 at 9.13.08 AM" width="630" height="475" class="alignnone size-full wp-image-343" /></a></p>

<p>From this point lets add another library, will call it <a href="https://github.com/financeCoding/dart-using-prefix-example/blob/master/XORCipher/XORCipher.dart">XORCipher</a> which will call its library "CipherLib". The <a href="https://github.com/financeCoding/dart-using-prefix-example/blob/master/XORCipher/XORCipher.dart">XORCipher</a> and <a href="https://github.com/financeCoding/dart-using-prefix-example/blob/master/CaesarCipher/CaesarCipher.dart">CaesarCipher</a> will have libraries named "CipherLib", both have functions that have the same name but take different parameters. Now we shall run into a problem that could be presented when using others libraries or code, we have conflicting names in the global namespace of our main application.
<a href="http://financecoding.files.wordpress.com/2012/01/screen-shot-2012-01-14-at-9-30-56-am.png"><img src="http://financecoding.files.wordpress.com/2012/01/screen-shot-2012-01-14-at-9-30-56-am.png" alt="" title="Screen Shot 2012-01-14 at 9.30.56 AM" width="584" height="454" class="alignnone size-full wp-image-346" /></a></p>

<p>The way we resolve this is by adding prefix to one or both libraries and call them from the fully qualified names.[sourcecode lang="java"]</p>

<h1>import('../CaesarCipher/CaesarCipher.dart', prefix:&quot;Caesar&quot;);</h1>

<h1>import('../XORCipher/XORCipher.dart', prefix:&quot;XOR&quot;);</h1>

<p>void main() {
  String s = &quot;HELLOWORLD&quot;;
  print(&quot;${s}&quot;);</p>

<p>  s = XOR.EncryptDecrypt(s);
  print(&quot;After encrypt XOR ${s}&quot;);
  s = XOR.EncryptDecrypt(s);
  print(&quot;After decrypt XOR ${s}&quot;);</p>

<p>  s = Caesar.EncryptDecrypt(s, true);
  print(&quot;After encrypt Caesar ${s}&quot;);
  s = Caesar.EncryptDecrypt(s, false);
  print(&quot;After decrypt Caesar ${s}&quot;);
}
[/sourcecode]</p>

<p><a href="http://financecoding.files.wordpress.com/2012/01/screen-shot-2012-01-14-at-9-35-10-am.png"><img src="http://financecoding.files.wordpress.com/2012/01/screen-shot-2012-01-14-at-9-35-10-am.png" alt="" title="Screen Shot 2012-01-14 at 9.35.10 AM" width="305" height="157" class="alignnone size-full wp-image-349" /></a></p>

<p>Another way to encapsulate source code using libraries is to use the #source declaration in a #library and then to #import the library into your application. From the language specifications: <blockquote>An include directive specifics a URI where a Dart compilation unit that should be incorporated into the current library may be found. A compilation unit is a sequence of top level declarations. Compiling an include directive of the form #source(s); causes the Dart system to attempt to compile the contents of the URI that is the value of s. The top level declarations at that URI are then compiled by the Dart compiler in the scope of the current library. It is a compile-time error if the contents of the URI are not a valid compilation unit. It is a compile-time error if s is not a compile-time constant.</blockquote></p>

<p>An example of this type of library can be seen in <a href="https://github.com/financeCoding/dart-hash-server/tree/master/src/HashLib">HashLib</a>/<a href="https://github.com/financeCoding/dart-hash-server/blob/master/src/HashLib/hashlib.dart">hashlib.dart</a>:[sourcecode lang="java"]</p>

<h1>library('hashlib');</h1>

<h1>source('hasher.dart');</h1>

<h1>source('hasherimpl.dart');</h1>

<h1>source('aphash.dart');</h1>

<h1>source('bkdrhash.dart');</h1>

<h1>source('dekhash.dart');</h1>

<h1>source('djbhash.dart');</h1>

<h1>source('elfhash.dart');</h1>

<h1>source('jshash.dart');</h1>

<h1>source('pjwhash.dart');</h1>

<h1>source('rshash.dart');</h1>

<h1>source('sdbmhash.dart');</h1>

<h1>source('nullhash.dart');</h1>

<h1>source('bphash.dart');</h1>

<h1>source('fnvhash.dart');</h1>

<p>[/sourcecode]</p>

<p>Another great example of this can be seen in <a href="https://plus.google.com/115427174005651655317/">John Evans</a> <a href="https://github.com/LUCA-Studios-LLC/LUCA-UI-Framework-for-Dart">LUCA UI Framework</a> <a href="https://github.com/LUCA-Studios-LLC/LUCA-UI-Framework-for-Dart/blob/master/core_tests/LUCA_UI_Tests.dart">unit test code</a>. He needed access to some internal dom objects but wanted to preserve the ability to use the elegantly designed <a href="http://api.dartlang.org/html.html">html</a> library. [sourcecode lang="java"]</p>

<h1>import('dart:html');</h1>

<h1>import('dart:dom', prefix:'dom');</h1>

<h1>import('../unit_test_framework/UnitTestFramework.dart');</h1>

<h1>import('../core/LUCA_UI_Framework.dart');</h1>

<p>[/sourcecode]</p>

<p>Its not uncommon to run into instances where two libraries or source files may define classes, interfaces, functions, type definitions that have similar names in other libraries or source files. The best way to work in these types of situations is to add a prefix where your #import are. A very common one that people run into is with <a href="http://api.dartlang.org/html.html">"html"</a>, Node and Element class. So individuals wanting to create some type of search or sorting might also want to use the Node name, best answer would be to prefix <a href="http://api.dartlang.org/html.html">"html"</a> or your own library code. After your able to reference the library by its fully qualified name, instead of assuming it was globally included. This does feel similar to the <a href="http://msdn.microsoft.com/en-us/library/sf0df423(v=vs.71).aspx">using alias</a> in C#, but with a feeling of inversion of control to the library.</p>

<p>References:
Sample code <a href="https://github.com/financeCoding/dart-using-prefix-example">dart-using-prefix-example</a>
<a href="http://www.dartlang.org/docs/spec/dartLangSpec.pdf">Language specification</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dartium Build rev 116980 in 4 easy steps]]></title>
    <link href="http://financeCoding.github.com/blog/2012/01/11/dartium-build-rev-116980-in-4-easy-steps/"/>
    <updated>2012-01-11T00:00:00-08:00</updated>
    <id>http://financeCoding.github.com/blog/2012/01/11/dartium-build-rev-116980-in-4-easy-steps</id>
    <content type="html"><![CDATA[<p style="margin-left:22pt;">At the moment <a href="http://code.google.com/p/dart/wiki/BuildingDartium">Dartium builds</a> are not available on Googles <a href="http://gsdview.appspot.com/dart-editor-archive-continuous/latest/">continuous integration server</a>. So I decided to distribute a release build for <a href="http://dl.dropbox.com/u/33138127/dartium/dartium-linux-32bit-Release.tar.gz">Linux 32bit</a> . Based on the wiki directions its simple enough for anyone to generate, I felt the need to distribute a build for those who don't have the time to invest in downloading/configuring/building. An important tip testing dart code in Dartium is to include the additional script call that executes the entry into main(). This is done by adding an additional &lt;script&gt;{}&lt;/script&gt; following the line where the dart code is loaded.</p>


<p style="margin-left:22pt;">The build of Dartium provide is from Rev: 116980</p>


<p style="margin-left:22pt;"><img src="http://financecoding.files.wordpress.com/2012/01/011212_0219_dartiumbuil1.png" alt="" /></p>




<ul>
    <li>
<h3>Get the latest version of DartEditor and Dartium</h3>
</li>
</ul>


<pre>wget <a href="http://gsdview.appspot.com/dart-editor-archive-continuous/latest/DartBuild-linux.gtk.x86.zip">http://gsdview.appspot.com/dart-editor-archive-continuous/latest/DartBuild-linux.gtk.x86.zip</a>
wget <a href="http://dl.dropbox.com/u/33138127/dartium/dartium-linux-32bit-Release.tar.gz">http://dl.dropbox.com/u/33138127/dartium/dartium-linux-32bit-Release.tar.gz</a>
wget <a href="http://dl.dropbox.com/u/33138127/dartium/dartium-linux-32bit-Release.tar.gz.md5">http://dl.dropbox.com/u/33138127/dartium/dartium-linux-32bit-Release.tar.gz.md5</a>
wget <a href="http://dl.dropbox.com/u/33138127/dartium/README.txt">http://dl.dropbox.com/u/33138127/dartium/README.txt</a>
md5sum -c dartium-linux-32bit-Release.tar.gz.md5</pre>


<ul>
    <li>Register Dartium on Ubuntu as a registered application so DartEditor can pick it up. Modify dartium-browser.desktop to the chrome-wrapper where Dartium was unzipped.<img class="alignnone" src="http://financecoding.files.wordpress.com/2012/01/011212_0219_dartiumbuil2.png" alt="" width="444" height="172" /></li>
</ul>


<pre>wget <a href="http://dl.dropbox.com/u/33138127/dartium/dartium-browser.desktop">http://dl.dropbox.com/u/33138127/dartium/dartium-browser.desktop</a>
vim dartium-browser.desktop
wget <a href="http://dl.dropbox.com/u/33138127/dartium/dartium-browser.desktop.ubuntu.install.sh">http://dl.dropbox.com/u/33138127/dartium/dartium-browser.desktop.ubuntu.install.sh</a>
sudo ./dartium-browser.desktop.ubuntu.install.sh</pre>


<ul>
    <li>
<h3>Register Dartium as the browser to launch in DartEditor</h3>
</li>
</ul>


<p><img src="http://financecoding.files.wordpress.com/2012/01/011212_0219_dartiumbuil3.png" alt="" /><span style="font-family:Times New Roman;font-size:12pt;">
</span></p>

<ul>
    <li>
<h3>Create a famous HelloWorld.</h3>
</li>
</ul>


<p><img src="http://financecoding.files.wordpress.com/2012/01/011212_0219_dartiumbuil4.png" alt="" /><span style="font-family:Times New Roman;font-size:12pt;">
</span></p>

<p><em>Adjust the html to properly execute dart.</em></p>

<p><img src="http://financecoding.files.wordpress.com/2012/01/011212_0219_dartiumbuil5.png" alt="" /><span style="font-family:Times New Roman;font-size:12pt;">
</span></p>

<p><img src="http://financecoding.files.wordpress.com/2012/01/011212_0219_dartiumbuil6.png" alt="" /><span style="font-family:Times New Roman;font-size:12pt;">
</span></p>

<p style="text-align:justify;">Watch <a href="http://en.wikipedia.org/wiki/Poison_dart_frog">dart</a> in its <a href="http://en.wiktionary.org/wiki/-ium">metal</a> state.</p>


<p>Links:</p>

<pre><a href="http://dl.dropbox.com/u/33138127/dartium/dartium-browser.desktop">http://dl.dropbox.com/u/33138127/dartium/dartium-browser.desktop</a>
<a href="http://dl.dropbox.com/u/33138127/dartium/dartium-browser.desktop.ubuntu.install.sh">http://dl.dropbox.com/u/33138127/dartium/dartium-browser.desktop.ubuntu.install.sh</a>
<a href="http://dl.dropbox.com/u/33138127/dartium/dartium-linux-32bit-Release.tar.gz">http://dl.dropbox.com/u/33138127/dartium/dartium-linux-32bit-Release.tar.gz</a>
<a href="http://dl.dropbox.com/u/33138127/dartium/dartium-linux-32bit-Release.tar.gz.md5">http://dl.dropbox.com/u/33138127/dartium/dartium-linux-32bit-Release.tar.gz.md5</a>
<a href="http://dl.dropbox.com/u/33138127/dartium/README.txt">http://dl.dropbox.com/u/33138127/dartium/README.txt</a></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Unit testing in DartEditor Alpha]]></title>
    <link href="http://financeCoding.github.com/blog/2011/12/18/unit-testing-in-darteditor-alpha-2/"/>
    <updated>2011-12-18T00:00:00-08:00</updated>
    <id>http://financeCoding.github.com/blog/2011/12/18/unit-testing-in-darteditor-alpha-2</id>
    <content type="html"><![CDATA[<p><a title="Unit testing in DartEditor Alpha" href="https://docs.google.com/document/pub?id=1A3O34aghr44umPA7fc9YGvFAHTYQFVCCRjcLCM6Yaw8" target="_blank">Original Document can be found here</a></p>

<p>[googleapps domain="docs" dir="document/pub" query="id=1A3O34aghr44umPA7fc9YGvFAHTYQFVCCRjcLCM6Yaw8&amp;embedded=true" /]</p>
]]></content>
  </entry>
  
</feed>
