<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Example | Random posts about coding]]></title>
  <link href="http://financeCoding.github.com/blog/categories/example/atom.xml" rel="self"/>
  <link href="http://financeCoding.github.com/"/>
  <updated>2013-10-22T21:12:04-07:00</updated>
  <id>http://financeCoding.github.com/</id>
  <author>
    <name><![CDATA[Adam Singer]]></name>
    <email><![CDATA[financeCoding@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Listing files with Google Drive and Dart]]></title>
    <link href="http://financeCoding.github.com/blog/2013/01/06/listing-files-with-google-drive-and-dart/"/>
    <updated>2013-01-06T18:23:00-08:00</updated>
    <id>http://financeCoding.github.com/blog/2013/01/06/listing-files-with-google-drive-and-dart</id>
    <content type="html"><![CDATA[<p>Moving forward with my curiosity of Google <a href="/blog/categories/Drive/">drive</a> and <a href="/blog/categories/Dart/">Dart</a>, today was spent creating a small <a href="https://github.com/financeCoding/dart_drive_files_list">sample</a> that lists files. For the most part this is a continuation of the following post <a href="/blog/2012/12/30/getting-started-with-dart-and-google-drive/">getting-started-with-dart-and-google-drive</a>.</p>

<p>Decided to move the loading of <a href="http://code.google.com/p/google-api-javascript-client/">client.js</a> into its own helper class for now. When dart has real support for Google client apis none of this will be needed. As of now this serves as good practice and examples of javascript/dart interop.</p>

<p>``` dart dart_drive_files_list.dart
/<em>*
 * Sample google api client loader.
 </em>/
class GoogleApiClientLoader {
  static const String <em>CLIENT_ID = '299615367852.apps.googleusercontent.com';
  static const String </em>SCOPE = 'https://www.googleapis.com/auth/drive';
  static const String _handleClientLoadName = "handleClientLoad";</p>

<p>  static void _loadScript() {</p>

<pre><code>/**
 * Create and load script element.
 */
ScriptElement script = new ScriptElement();
script.src = "http://apis.google.com/js/client.js?onload=$_handleClientLoadName";
script.type = "text/javascript";
document.body.children.add(script);
</code></pre>

<p>  }</p>

<p>  static void _createScopedCallbacks(var completer) {</p>

<pre><code>js.scoped((){
  /**
   * handleAuthResult is called from javascript when
   * the function to call once the login process is complete.
   */
  js.context.handleAuthResult = new js.Callback.many((js.Proxy authResult) {
    Map dartAuthResult = JSON.parse(js.context.JSON.stringify(authResult));
    completer.complete(dartAuthResult);
  });

  /**
   * This javascript method is called when the client.js script
   * is loaded.
   */
  js.context.handleClientLoad =  new js.Callback.many(() {
    js.context.window.setTimeout(js.context.checkAuth, 1);
  });

  /**
   * Authorization check if the client allows this
   * application to access its google drive.
   */
  js.context.checkAuth = new js.Callback.many(() {
    js.context.gapi.auth.authorize(
        js.map({
          'client_id': _CLIENT_ID,
          'scope': _SCOPE,
          'immediate': true
        }),
        js.context.handleAuthResult);
  });

});
</code></pre>

<p>  }</p>

<p>  /<em>*
   * Load the google client api, future returns
   * map results.
   </em>/
  static Future<Map> load() {</p>

<pre><code>var completer = new Completer();
_createScopedCallbacks(completer);
_loadScript();
return completer.future;
</code></pre>

<p>  }
}
```</p>

<p>The calling of <code>load()</code> returns a future with our authentication results. Eases the process of having the google drive scope available to the client application.</p>

<p>A simple dart <code>Drive</code> class created gives access to the list call from the javascript apis. The interesting point for me to learn is knowing that <code>client.js</code> has to load the drive api. In the <code>load()</code> future we call <code>js.context.gapi.client.load</code> which will take the api and version to be loaded for the client application.</p>

<p>``` dart dart_drive_files_list.dart
/<em>*
 * Sample google drive class.
 </em>/
class Drive {
  js.Proxy <em>drive;
  bool get </em>isLoaded => _drive != null;</p>

<p>  /<em>*
   * Load the gapi.client.drive api.
   </em>/
  Future<bool> load() {</p>

<pre><code>var completer = new Completer();
js.scoped(() {
  js.context.gapi.client.load('drive', 'v2', new js.Callback.once(() {
    _drive = js.context.gapi.client.drive;
    js.retain(_drive);
    completer.complete(true);
  }));
});
return completer.future;
</code></pre>

<p>  }</p>

<p>  /<em>*
   * Check if gapi.client.drive is loaded, if not
   * load before executing.
   </em>/
  void _loadederExecute(Function function) {</p>

<pre><code>if (_isLoaded) {
  function();
} else {
  load().then((s) {
    if (s == true) {
      function();
    } else {
      throw "loadedExecute failed";
    }
  });
}
</code></pre>

<p>  }</p>

<p>  /<em>*
   * List files with gapi.drive.files.list()
   </em>/
  Future<Map> list() {</p>

<pre><code>var completer = new Completer();
_loadederExecute(() {
  js.scoped(() {
    var request = _drive.files.list();
    request.execute(new js.Callback.once((js.Proxy jsonResp, var rawResp) {
      Map m = JSON.parse(js.context.JSON.stringify(jsonResp));
      completer.complete(m);
    }));
  });
});
return completer.future;
</code></pre>

<p>  }
}
```</p>

<p>With the following sugar classes it was easy to just list files from my google drive account.</p>

<p>``` dart dart_drive_files_list.dart
void main() {
  Drive drive = new Drive();
  GoogleApiClientLoader.load().then((result) {</p>

<pre><code>drive.list().then((Map files) {
  // https://developers.google.com/drive/v2/reference/files/list
  files['items'].forEach((i) {
    var li = new LIElement();
    AnchorElement a = new AnchorElement();
    a.href = i['alternateLink'];
    a.target = '_blank';
    a.text = i['title'];
    li.children.add(a);
    UListElement ul = query('#listmenu');
    ul.children.add(li);
  });
});
</code></pre>

<p>  });
}
```</p>

<p><a href="/images/2013-01-06-listing-files-with-google-drive-and-dart/listing_files_google_drive.png"><img src="/images/2013-01-06-listing-files-with-google-drive-and-dart/listing_files_google_drive.png" alt="listing-files-drive" /></a></p>

<p>Hopefully this helps with developers interested in google drive &amp; dart! Sample can be found on github <a href="https://github.com/financeCoding/dart_drive_files_list">dart_drive_files_list</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Last Dart mashup for 2012 - Clock Chrome App Drives ADK2012]]></title>
    <link href="http://financeCoding.github.com/blog/2012/12/31/last-dart-mashup-for-2012-clock-chrome-app-drives-adk2012/"/>
    <updated>2012-12-31T13:03:00-08:00</updated>
    <id>http://financeCoding.github.com/blog/2012/12/31/last-dart-mashup-for-2012-clock-chrome-app-drives-adk2012</id>
    <content type="html"><![CDATA[<p>My last dart mashup for the year, excited to see what the community and dart team brings for 2013.</p>

<iframe width="560" height="315" src="http://www.youtube.com/embed/-Z-cxc3OXpE" frameborder="0" allowfullscreen></iframe>


<p>All source code can be found in the example directory of <a href="https://github.com/dart-gde/chrome.dart">chrome.dart</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting started with Dart and Google Drive]]></title>
    <link href="http://financeCoding.github.com/blog/2012/12/30/getting-started-with-dart-and-google-drive/"/>
    <updated>2012-12-30T16:27:00-08:00</updated>
    <id>http://financeCoding.github.com/blog/2012/12/30/getting-started-with-dart-and-google-drive</id>
    <content type="html"><![CDATA[<p>Following the example code from google drive <a href="https://developers.google.com/drive/quickstart-js">quickstart</a> I was able to recreate the sample in <a href="http://www.dartlang.org">Dart</a>. A lot of the heavy lifting is done by the <a href="https://github.com/dart-lang/js-interop">js-interop</a> cause of the dependency on <a href="http://code.google.com/p/google-api-javascript-client">google javascript client api</a>. This solution is fine for now, I'd take a good guess the dart team will provide client apis at some point.</p>

<p>Started off by creating a new sample project <code>dart_drive_quickstart</code>, removed all default code and add js-interop.</p>

<p><a href="/images/2012-12-30-getting-started-with-dart-and-google-drive/create-new-app.png"><img src="/images/2012-12-30-getting-started-with-dart-and-google-drive/create-new-app.png" alt="create-new-app" /></a></p>

<p><a href="/images/2012-12-30-getting-started-with-dart-and-google-drive/remove-defaults.png"><img src="/images/2012-12-30-getting-started-with-dart-and-google-drive/remove-defaults.png" alt="remove-defaults" /></a></p>

<p>Bring in the javascript client apis as <code>ScriptElement</code> and set a <code>onload</code> handler to a dart callback.</p>

<p>``` dart dart_drive_quickstart.dart
import 'dart:html';
import 'dart:json';
import 'package:js/js.dart' as js;</p>

<p>final String CLIENT_ID = '<YOURCLIENTID>';
final String SCOPE = 'https://www.googleapis.com/auth/drive';</p>

<p>void main() {
  js.scoped((){</p>

<pre><code>js.context.handleAuthResult = new js.Callback.many((js.Proxy authResult) {
  Map dartAuthResult = JSON.parse(js.context.JSON.stringify(authResult));
  print("dartAuthResult = ${dartAuthResult}");
});      

js.context.handleClientLoad =  new js.Callback.many(() {
  js.context.window.setTimeout(js.context.checkAuth, 1);
});

js.context.checkAuth = new js.Callback.many(() {
  js.context.gapi.auth.authorize(
      js.map({
          'client_id': CLIENT_ID,
          'scope': SCOPE,
          'immediate': true
        }),
        js.context.handleAuthResult);
});         
</code></pre>

<p>  });</p>

<p>  ScriptElement script = new ScriptElement();
  script.src = "http://apis.google.com/js/client.js?onload=handleClientLoad";
  script.type = "text/javascript";
  document.body.children.add(script);
}
```</p>

<p>Manually adding the script code and hooking up a callback from javascript to dart seemed to work fine. I ran into issues with callbacks not being scoped when they should of been scoped. Another odd thing was the need for the call to <code>setTimeout</code>, the callback to <code>handleAuthResult</code> would not get fired if <code>checkAuth</code> was not called from <code>setTimeout</code>.</p>

<p>The rest of the code included was for the most part a direct translation of the quickstart sample. Added some dart flavoring when appropriate.</p>

<p>Here are some action shots and code. The full project can be found on github <a href="https://github.com/financeCoding/dart_drive_quickstart">dart_drive_quickstart</a></p>

<p><a href="/images/2012-12-30-getting-started-with-dart-and-google-drive/app-launched.png"><img src="/images/2012-12-30-getting-started-with-dart-and-google-drive/app-launched.png" alt="app-launched" /></a></p>

<p><a href="/images/2012-12-30-getting-started-with-dart-and-google-drive/file-choose.png"><img src="/images/2012-12-30-getting-started-with-dart-and-google-drive/file-choose.png" alt="file-choose" /></a></p>

<p><a href="/images/2012-12-30-getting-started-with-dart-and-google-drive/file-uploaded.png"><img src="/images/2012-12-30-getting-started-with-dart-and-google-drive/file-uploaded.png" alt="file-uploaded" /></a></p>

<p><a href="/images/2012-12-30-getting-started-with-dart-and-google-drive/file-opened-in-drive.png"><img src="/images/2012-12-30-getting-started-with-dart-and-google-drive/file-opened-in-drive.png" alt="file-opened-in-drive" /></a></p>

<p>``` dart dart_drive_quickstart.dart
import 'dart:html';
import 'dart:json';
import 'package:js/js.dart' as js;</p>

<p>final String CLIENT_ID = '299615367852.apps.googleusercontent.com';
final String SCOPE = 'https://www.googleapis.com/auth/drive';</p>

<p>void main() {
  js.scoped((){</p>

<pre><code>void insertFile(File fileData, [callback = null]) {
  String boundary = '-------314159265358979323846';
  String delimiter = "\r\n--$boundary\r\n";
  String close_delim = "\r\n--$boundary--";

  var reader = new FileReader();
  reader.readAsBinaryString(fileData);
  reader.on.load.add((Event e) {
    var contentType = fileData.type;
    if (contentType.isEmpty) {
      contentType = 'application/octet-stream';
    }

    var metadata = {
      'title' : fileData.name,
      'mimeType' : contentType
    };

    var base64Data = window.btoa(reader.result);
    var sb = new StringBuffer();
    sb
    ..add(delimiter)
    ..add('Content-Type: application/json\r\n\r\n')
    ..add(JSON.stringify(metadata))
    ..add(delimiter)
    ..add('Content-Type: ')
    ..add(contentType)
    ..add('\r\n')
    ..add('Content-Transfer-Encoding: base64\r\n')
    ..add('\r\n')
    ..add(base64Data)
    ..add(close_delim);

    var multipartRequestBody = sb.toString();

    print("multipartRequestBody");
    print(multipartRequestBody);

    js.scoped(() {
      var request = js.context.gapi.client.request(
        js.map({
          'path': '/upload/drive/v2/files',
          'method': 'POST',
          'params': {'uploadType': 'multipart'},
          'headers': {
            'Content-Type': 'multipart/mixed; boundary="$boundary"'
          },
          'body': multipartRequestBody
        }));

      if (callback == null) {
        callback = new js.Callback.many((js.Proxy jsonResp, var rawResp) {
          print(js.context.JSON.stringify(jsonResp));
          print(rawResp);

          Map r = JSON.parse(js.context.JSON.stringify(jsonResp));
          StringBuffer sb = new StringBuffer();
          if (r.containsKey('error')) {
            sb.add(r.toString());
          } else {
            sb.add("${r["title"]} has been uploaded.");
          }

          query('#text').text = sb.toString();
        });
      }

      request.execute(callback);
    });

  });
};

void uploadFile(Event evt) {
  js.scoped( () {
    js.context.gapi.client.load('drive', 'v2', new js.Callback.many(() {
      var file = evt.target.files[0];
      insertFile(file);
    }));
  });
}

js.context.handleAuthResult = new js.Callback.many((js.Proxy authResult) {
  Map dartAuthResult = JSON.parse(js.context.JSON.stringify(authResult));
  print("dartAuthResult = ${dartAuthResult}");

  var authButton = query('#authorizeButton');
  var filePicker = query('#filePicker');
  authButton.style.display = 'none';
  filePicker.style.display = 'none';

  if (!dartAuthResult.containsKey('error')) {
    // Access token has been successfully retrieved, requests can be sent to the API.
    filePicker.style.display = 'block';
    filePicker.on['change'].add(uploadFile);
  } else {
    authButton.style.display = 'block';
    authButton.on.click.add((Event e) {
      js.scoped(() {
        js.context.gapi.auth.authorize(
            js.map({
                'client_id': CLIENT_ID,
                'scope': SCOPE,
                'immediate': true
              }),
              js.context.handleAuthResult);
      });
    });
  }
});

js.context.handleClientLoad =  new js.Callback.many(() {
  js.context.window.setTimeout(js.context.checkAuth, 1);
});

js.context.checkAuth = new js.Callback.many(() {
  js.context.gapi.auth.authorize(
      js.map({
          'client_id': CLIENT_ID,
          'scope': SCOPE,
          'immediate': true
        }),
        js.context.handleAuthResult);
});
</code></pre>

<p>  });</p>

<p>  ScriptElement script = new ScriptElement();
  script.src = "http://apis.google.com/js/client.js?onload=handleClientLoad";
  script.type = "text/javascript";
  document.body.children.add(script);
}
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[builtool and libraries with cordova in dart on ios]]></title>
    <link href="http://financeCoding.github.com/blog/2012/12/29/builtool-and-libraries-with-cordova-in-dart-on-ios/"/>
    <updated>2012-12-29T21:36:00-08:00</updated>
    <id>http://financeCoding.github.com/blog/2012/12/29/builtool-and-libraries-with-cordova-in-dart-on-ios</id>
    <content type="html"><![CDATA[<p>Continuing on the chain of <a href="/blog/categories/phonegap-from-scratch/">phonegap_from_scratch</a>, this post goes over <a href="https://github.com/dart-lang/buildtool">buildtool</a> and libraries.</p>

<p>Took an afternoon to look into using <a href="https://github.com/dart-lang/buildtool">buildtool</a> for helping call dart2js on save within the DartEditor. Minor <a href="https://github.com/financeCoding/buildtool/commit/0692911befaa5705a2928ffaa532c295191d1155">modifications</a> was needed to redirect the generated javascript code to the cordova <code>www</code> directory in the project. This tool is still in the works and future versions will be more robust.</p>

<p>The trend with dart currently is to use <code>pub</code> with github or to publish on <a href="http://pub.dartlang.org/">pub.dartlang.org</a>. A great feature with <code>pub</code> is if you want to make modifications to an existing project on github, <code>fork+branch</code> is an easy way to get hacking with modifications to an existing package. <code>buildtool</code>'s quick hack was added to the pubspec.yaml file as follows.</p>

<p>``` yaml pubspec.yaml
name:  dartdova
description:  A sample dart cordova integration
dependencies:
  js: any
  unittest: 0.2.9+7
  logging: 0.2.9+7
  buildtool:</p>

<pre><code>git:
  url: git://github.com/financeCoding/buildtool.git
  ref: diroverride
</code></pre>

<p>```</p>

<p>This pubspec.yaml pulls in the branch <code>diroverride</code> from a cloned version of <code>buildtool</code> from my github. Awesome solution for modifications that might not be upstreamed and needed quickly for testing.</p>

<p>Moving along, the DartEditor will look for a <code>build.dart</code> file in the root directory of a projects folder. When that file is found it will execute on file changes within the project. <code>buildtool</code> currently provides a client/server architecture for building or transforming dart projects. The particular task I was interested in is <code>Dart2JSTask</code> which calls the dart2js compiler on modified dart files. With my modifications it now outputs the generated javascript code into the directory specified in the <code>Dart2JSTask.withOutDir</code> constructor.</p>

<p>``` dart build.dart</p>

<h1>!/usr/bin/env dart</h1>

<p>import 'dart:io';
import 'package:buildtool/buildtool.dart';
import 'package:buildtool/dart2js_task.dart';
void main() {
  var config = () {</p>

<pre><code>var dart2jstask = new Dart2JSTask.withOutDir("dart2js", new Path("."));
addTask(["app.dart"], dart2jstask);
</code></pre>

<p>  };</p>

<p>  configure(config);
}
```</p>

<p>The way that I've approached running the server side of the <code>buildtool</code> was to launch a <code>./build.dart --server</code> process before opening the project in the DartEditor.</p>

<p><code>bash output
~/dart/phonegap_from_scratch/phonegap_from_scratch/www
$ ./build.dart --server
2012-12-29 23:06:49.732 INFO adding task Instance of 'Dart2JSTask' for files [app.dart]
2012-12-29 23:06:49.757 INFO startServer
2012-12-29 23:06:49.757 INFO listening on localhost:52746
buildtool server ready
port: 52746
</code></p>

<p>On each save in the project the server side will generate javascript code via <code>Dart2JSTask</code>.</p>

<p><code>bash output
2012-12-29 23:07:51.897 INFO starting build
2012-12-29 23:07:51.903 INFO cwd: /Users/adam/dart/phonegap_from_scratch/phonegap_from_scratch/www build_out/out
2012-12-29 23:07:51.909 FINE _runTasks: [_source:app.dart]
2012-12-29 23:07:51.911 INFO cwd: /Users/adam/dart/phonegap_from_scratch/phonegap_from_scratch/www build_out/_dart2js
2012-12-29 23:07:51.915 INFO dart2js task starting. files: [_source:app.dart]
2012-12-29 23:07:51.918 FINE running dart2js args: [--out=./app.dart.js, --verbose, app.dart]
2012-12-29 23:08:00.778 FINE dart2js exitCode: 0
2012-12-29 23:08:00.779 INFO dartjs tasks complete
2012-12-29 23:08:00.784 FINE tasks at depth 0 complete
2012-12-29 23:08:01.288 INFO starting build
2012-12-29 23:08:01.289 INFO cwd: /Users/adam/dart/phonegap_from_scratch/phonegap_from_scratch/www build_out/out
2012-12-29 23:08:01.291 FINE _runTasks: [_source:app.dart.js, _source:app.dart.js.deps, _source:app.dart.js.map]
2012-12-29 23:08:01.291 FINE tasks at depth 0 complete
</code></p>

<p>This solution saves me having to run the <code>./build.sh</code> from command line and launching the iOS simulator on each launch.</p>

<p>The other changes to this project was to refactor the single <code>app.dart</code> into a collection of dart library  files. Seems that each of the API categories have been implemented as singletons. At some point I may make this similar to <a href="https://github.com/rikulo/gap">gap</a> where each category of API is a singleton and instantiated at the top level of a dart library.</p>

<p><code>bash output
~/dart/phonegap_from_scratch/phonegap_from_scratch/www
$ tree
.
├── app.dart
├── app.dart.js
├── app.dart.js.deps
├── app.dart.js.map
├── build.dart
├── build.sh
├── cordova.js
├── dart.js
├── dart_interop.js
├── index.html
├── lib
│   └── src
│       ├── connection.dart
│       ├── cordova_events.dart
│       ├── device.dart
│       ├── globalization.dart
│       ├── notification.dart
│       └── splashscreen.dart
└── pubspec.yaml
</code></p>

<p>New classes added <code>Connection</code>, <code>CordovaEvents</code>, <code>Notification</code>, <code>Splashscreen</code> and <code>Globalization</code>. <code>Globalization</code> is presenting a problem with knowing the proper ways to parse date strings within the javascript implementation dependent scenarios. For now I might just skip them, different javascript engines parse <code>Date</code> strings different ways and my goal was not to cover all of them. <code>app.dart</code> is now importing the libraries directly at some point a single <code>lib/cordova.dart</code> library should be provided.</p>

<p>This is where my journey for tonight has ended, <code>Contacts</code> might be the next exciting class of API to cover.</p>

<p>The code for <a href="/blog/categories/phonegap-from-scratch/">phonegap_from_scratch</a> can be found on <a href="https://github.com/financeCoding/phonegap_from_scratch">github</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[event handling and logging with cordova in dart on iOS]]></title>
    <link href="http://financeCoding.github.com/blog/2012/12/27/event-handling-and-logging-with-cordova-in-dart-on-ios/"/>
    <updated>2012-12-27T00:22:00-08:00</updated>
    <id>http://financeCoding.github.com/blog/2012/12/27/event-handling-and-logging-with-cordova-in-dart-on-ios</id>
    <content type="html"><![CDATA[<p>Continuing on the chain of <a href="/blog/categories/phonegap-from-scratch/">phonegap_from_scratch</a> this post goes over event handlers and logging.</p>

<p>Adding logging was trivial with the <a href="http://pub.dartlang.org/packages/logging"><code>logger</code></a> library on pub. Adding the following dependencies and setup configuration code was just enough to help with logging tests and code.</p>

<p><code>yaml pubspec.yaml
name:  dartdova
description:  A sample dart cordova integration
dependencies:
  js: any
  unittest: 0.2.9+7
  logging: 0.2.9+7
</code></p>

<p>``` dart configureLogging
void configureLogging() {
  Logger.root.level = Level.ALL;
  Logger.root.on.record.add((LogRecord r) {</p>

<pre><code>// Print to console.log when compiled to javascript.
print("${r.loggerName}:${r.level.name}:${r.sequenceNumber}:\n${r.message.toString()}");
</code></pre>

<p>  });
}
```</p>

<p>Cordova ships with a list of custom <a href="http://docs.phonegap.com/en/2.2.0/cordova_events_events.md.html#Events">events</a> that can be fired off to the dom. The common pattern is to add event handlers to these events. Luckily we can receive the events without having to register handles with js-interop.</p>

<pre><code>deviceready
pause
resume
online
offline
backbutton
batterycritical
batterylow
batterystatus
menubutton
searchbutton
startcallbutton
endcallbutton
volumedownbutton
volumeupbutton
</code></pre>

<p>I've noticed a few of them need to be hooked really early in the loading of a dart application. One <code>deviceready</code> being critical for knowing when the device is ready. If they are not hooked early in the application you could miss the event. At least I've noticed that with the iOS simulator.</p>

<p><code>dart main
void main() {
  /**
   * Cordova.js will fire off 'deviceready' event once fully loaded.
   * listen for the event on js.context.document.
   *
   * This must be the first event wired up before creating Device.
   */
  document.on['deviceready'].add(deviceReady);
}
</code></p>

<p><code>online</code>, <code>offline</code>, <code>battery*</code> are also events that one might want to catch early in <code>main()</code>. Later in the application after <code>deviceready</code> has been fired off you can remove the old handlers and add new ones that relate to the context created.</p>

<p>The design pattern for <code>Device</code> is a singleton which left me with having event handlers registered whenever any newed references go out of scope. This works for now, another approach for event handling could of been to use <a href="https://github.com/prujohn/Reactive-Dart">Reactive-Dart</a> <code>Observable</code> object.</p>

<p>```dart Device</p>

<p>/<em>* The device: Singleton </em>/
class Device {
  static final Device <em>singleton = new Device.</em>internal();</p>

<p>  Logger <em>logger;
  js.Proxy </em>device;</p>

<p>  factory Device() {</p>

<pre><code>return _singleton;
</code></pre>

<p>  }</p>

<p>  Device._internal() {</p>

<pre><code>_logger = new Logger("Device");

_registerHandlers();

js.scoped(() {
  _device = js.context.device;
  js.retain(_device);
});
</code></pre>

<p>  }</p>

<p>  void _registerHandlers() {</p>

<pre><code>_onOnlineHandlers = new List&lt;Function&gt;();
document.on['online'].add(_onOnline);

_onOfflineHandlers = new List&lt;Function&gt;();
document.on['offline'].add(_onOffline);
</code></pre>

<p>  }</p>

<p>  String get name => js.scoped(() => <em>device.name);
  String get cordova => js.scoped(() => </em>device.cordova);
  String get platform => js.scoped(() => <em>device.platform);
  String get uuid => js.scoped(() => </em>device.uuid);
  String get version => js.scoped(() => _device.version);</p>

<p>  List<Function> <em>onOnlineHandlers;
  List<Function> get onOnline => </em>onOnlineHandlers;
  void <em>onOnline(Event event) => </em>onOnlineHandlers.forEach((handler)=>handler(event));</p>

<p>  List<Function> <em>onOfflineHandlers;
  List<Function> get onOffline => </em>onOfflineHandlers;
  void <em>onOffline(Event event) => </em>onOfflineHandlers.forEach((handler)=>handler(event));
}
```</p>

<p>Creating tests for this type of pluming was not too difficult using <a href="http://api.dartlang.org/docs/bleeding_edge/unittest.html#expectAsync1"><code>expectAsync1</code></a>. The most of time spent on figuring this out was creating <a href="http://api.dartlang.org/docs/bleeding_edge/dart_html/CustomEvent.html"><code>CustomEvent</code></a> and calling <a href="http://api.dartlang.org/docs/bleeding_edge/dart_html/EventListenerList.html#dispatch"><code>dispatch</code></a>. This is enough functionality to see that device was properly wired up with handlers. I found it important to cover lots of tests when working with Cordova, error handling and reporting is very minimal. At times something would stop working with no console output. So I move forward with code and test in tandem.</p>

<p>``` dart runTests</p>

<pre><code>test('Device Event online', () {
  var eventName = 'online';
  var asyncMethod = expectAsync1((Event event)=&gt;expect(event.type, equals('$eventName')));
  var customEvent = new CustomEvent('$eventName', true, false, "custom event");
  var device = new Device();
  device.onOnline.add(asyncMethod);
  document.on['$eventName'].dispatch(customEvent);
});

test('Device Event offline', () {
  var eventName = 'offline';
  var asyncMethod = expectAsync1((Event event)=&gt;expect(event.type, equals('$eventName')));
  var customEvent = new CustomEvent('$eventName', true, false, "custom event");
  var device = new Device();
  device.onOffline.add(asyncMethod);
  document.on['$eventName'].dispatch(customEvent);
});
</code></pre>

<p>```</p>

<p><a href="/images/2012-12-27-event-handling-and-logging-with-cordova-in-dart-on-ios/unittests_passing.png"><img src="/images/2012-12-27-event-handling-and-logging-with-cordova-in-dart-on-ios/unittests_passing.png" alt="unittest_pass" /></a></p>

<p>So far this is a good enough to have a device class and event handlers for custom events. The single <a href="https://github.com/financeCoding/phonegap_from_scratch"><code>app.dart</code></a> is starting to get large, next it should be broken out. I integrated the event handling directly in the <code>Device</code> class, but the Cordova <a href="http://docs.phonegap.com/en/2.2.0/index.html">API Reference</a> keeps them at the top level of the application. So a singleton <code>Events</code> or <code>CordovaEvents</code> class might be useful to separate the implementation out.</p>

<p>A project that is just starting to hit the <a href="https://github.com/dart-lang/">dart-lang</a> github repository is <a href="https://github.com/dart-lang/buildtool">buildtool</a>. <code>buildtool</code> might provide a better solution then having a custom build script that needs to be called before each launch of the simulator.</p>

<p>The code for <a href="/blog/categories/phonegap-from-scratch/">phonegap_from_scratch</a> can be found on <a href="https://github.com/financeCoding/phonegap_from_scratch">github</a></p>
]]></content>
  </entry>
  
</feed>
