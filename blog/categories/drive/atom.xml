<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Drive | Random posts about coding]]></title>
  <link href="http://financeCoding.github.com/blog/categories/drive/atom.xml" rel="self"/>
  <link href="http://financeCoding.github.com/"/>
  <updated>2013-10-01T23:14:08-07:00</updated>
  <id>http://financeCoding.github.com/</id>
  <author>
    <name><![CDATA[Adam Singer]]></name>
    <email><![CDATA[financeCoding@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Dart Multi Touch Canvas With Realtime APIs]]></title>
    <link href="http://financeCoding.github.com/blog/2013/03/21/dart-multi-touch-canvas-with-realtime-apis/"/>
    <updated>2013-03-21T18:19:00-07:00</updated>
    <id>http://financeCoding.github.com/blog/2013/03/21/dart-multi-touch-canvas-with-realtime-apis</id>
    <content type="html"><![CDATA[<p><a href="https://developers.google.com/drive/">Google</a> has made the <a href="https://developers.google.com/drive/realtime/">realtime</a> api available for developers. Realtime api provides <a href="http://en.wikipedia.org/wiki/Operational_transformation">operational transformation</a> on <a href="https://developers.google.com/drive/realtime/reference/gapi.drive.realtime.CollaborativeString">strings</a>, <a href="https://developers.google.com/drive/realtime/reference/gapi.drive.realtime.CollaborativeList">lists</a>, <a href="https://developers.google.com/drive/realtime/reference/gapi.drive.realtime.CollaborativeMap">maps</a> and custom <a href="https://developers.google.com/drive/realtime/reference/gapi.drive.realtime.CollaborativeObject">objects</a>. The application data gets stored on Google Drive and is available from any supported browser. This is going to be the tooling of the future for collaborative applications.</p>

<p>I took some time to see what it would take for implementing a sample realtime application in dart. Also wanted to make sure my sample could run on mobile chrome.</p>

<p>Since realtime api is new, dart bindings don't really exist. Lucky for us we have <a href="http://pub.dartlang.org/packages/js">js-interop</a> library. The <a href="http://pub.dartlang.org/packages/js">js-interop</a> library provides communications to existing javascript code from dart. I consider this mostly a quick hack to get started with the realtime api until a more native interface exists.</p>

<p>The sample <a href="http://financecoding.github.com/realtime_touch_canvas/web/index.html">realtime_touch_canvas</a> demonstrates a multi touch canvas surface that updates in realtime with all clients that have the application open.</p>

<iframe width="560" height="315" src="http://www.youtube.com/embed/xArfJdOb55Q" frameborder="0" allowfullscreen></iframe>


<p>Most of the heavy lifting is done by <a href="https://github.com/financeCoding/realtime_touch_canvas"><code>rtclient.dart</code></a>. I ported the <a href="https://github.com/googledrive/realtime-playground/blob/master/js/realtime-client-utils.js">code</a> from the javascript version. Its enough code to get started right away but a more structured solution should be done. The main class is <code>RealTimeLoader</code> used for realtime loading.</p>

<p>```dart
  rtl = new RealTimeLoader(clientId: 'CLIENTID.apps.googleusercontent.com', apiKey: 'KEY');
  rtl.start().then((bool isComplete) {</p>

<pre><code>/* RealTimeLoader has authenticated the application and is ready to load a file */
loadRealTimeFile(fileId, model.onFileLoaded, model.initializeModel);
</code></pre>

<p>  });
```</p>

<p><code>model.onFileLoaded</code> and <code>model.initializeModel</code> handle the creating of model data and loading of model data.</p>

<p>In the <a href="http://financecoding.github.com/realtime_touch_canvas/web/index.html">realtime_touch_canvas</a>, model data was a simple list of json strings. The ticky part here is you need to remember that your working with the realtime api within the javascript vm. So an array needs to be allocated from <a href="http://pub.dartlang.org/packages/js">js-interop</a>.</p>

<p>```dart
  void _createNewModel(js.Proxy model) {</p>

<pre><code>var list = model.createList(js.array(_defaultLines));
model.getRoot().set(_linesName, list);
</code></pre>

<p>  }
```</p>

<p>After the model is created we then get called to load the file. Loading the file for our purposes is binding the collaborative objects. Some tricky things to note here is we are retaining the javascript objects so we can access them after exit of the callback. Also the callbacks have to be wrapped within <a href="http://pub.dartlang.org/packages/js">js-interop</a> <code>js.Callback.many</code> proxy object. The callbacks <code>_linesOnAddValuesChangedEvent</code> and <code>_linesOnRemovedValuesChangedEvent</code> are fired off when the collaborative list object has items added or removed.</p>

<p>```dart
  js.Proxy <em>doc;
  String </em>linesName = "lines";
  js.Proxy _lines;</p>

<p>  void _bindModel(js.Proxy doc) {</p>

<pre><code>_doc = doc;
js.retain(_doc);
_lines = doc.getModel().getRoot().get(_linesName);
_lines.addEventListener(gapi.drive.realtime.EventType.VALUES_ADDED, new js.Callback.many(_linesOnAddValuesChangedEvent));
_lines.addEventListener(gapi.drive.realtime.EventType.VALUES_REMOVED, new js.Callback.many(_linesOnRemovedValuesChangedEvent));
js.retain(_lines);
</code></pre>

<p>  }
```</p>

<p>When the callback is called the data would be in the javascript virtual machine so we can parse it and store in our native dart code. This is more of a convenience then a must do, that way we can expose plan old dart objects to our other parts of the dart application.</p>

<p>```dart
  void _linesOnAddValuesChangedEvent(addedValue) {</p>

<pre><code>var insertedLine = _lines.get(addedValue.index);
var line = new Line.fromJson(insertedLine);
realtimeTouchCanvas.move(line, line.moveX, line.moveY);
</code></pre>

<p>  }
```</p>

<p>Now when we want to store a line in the application we simply convert it to json and push it into the collaborative list. The little tick here is to make sure we are <code>scoped</code> when accessing the <code>_lines</code> object since it lives in the javascript virtual machine.</p>

<p>```dart
  void addLine(Line line) {</p>

<pre><code>js.scoped(() {
  _lines.push(line.toJson());
});
</code></pre>

<p>  }
```</p>

<p>The <a href="http://financecoding.github.com/realtime_touch_canvas/web/index.html">realtime_touch_canvas</a> is live on github gh-pages and <a href="https://github.com/financeCoding/realtime_touch_canvas">realtime_touch_canvas source</a> is available.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Dart for Website Publishing on Google Drive]]></title>
    <link href="http://financeCoding.github.com/blog/2013/01/27/using-dart-for-website-publishing-on-google-drive/"/>
    <updated>2013-01-27T00:38:00-08:00</updated>
    <id>http://financeCoding.github.com/blog/2013/01/27/using-dart-for-website-publishing-on-google-drive</id>
    <content type="html"><![CDATA[<p>After watching a <a href="http://www.youtube.com/watch?v=T56eZ1lg2oE">Generating a Google Drive Hosted Website with tools you have lying around in your kitchen</a> by <a href="https://plus.google.com/118327176775959145936">Ali Afshar</a> I got interested in doing the same thing with dart.</p>

<p>Had to ask my self a few questions first?</p>

<ul>
<li>Can the <a href="https://github.com/dart-gde/discovery_api_dart_client_generator">discovery_api_dart_client_generator</a> create drive_v2_api code that would allow us to access drive from the console?</li>
<li>Can dart process markdown?</li>
<li>Can we make the <a href="https://developers.google.com/drive/v2/reference/files">webViewLink</a> easier to read and share?</li>
</ul>


<p>At the time I started this investigation the <a href="https://github.com/dart-gde/discovery_api_dart_client_generator">discovery_api_dart_client_generator</a> did not have <a href="https://developers.google.com/accounts/docs/OAuth2#installed">OAuth2</a> support for installed applications. Knowing that <a href="http://pub.dartlang.org/">pub</a> does use OAuth2 in a similar fashion, I decided to peek inside of <a href="http://pub.dartlang.org/">pub</a> to see what it is doing.</p>

<p>After reviewing the <a href="http://pub.dartlang.org/">pub</a> <a href="https://github.com/dart-lang/bleeding_edge/tree/master/dart/utils/pub">source code</a>, it's interested to see how they handle getting tokens from the Google OAuth2 Authorization Server back to the client application. <a href="http://pub.dartlang.org/">pub</a> first checks if the client applications has a <code>~/.pub-cache/credentials.json</code> file stored, if the <code>credentials.json</code> is not found or invalid pub will generate an authorization url. The authorization url is copied and pasted by the user into a web browser and asks the user if they will allow access to some scopes. When the user accepts access the redirect url with token the Google OAuth2 Authorization Server redirects to a listening http server on localhost. This server was started by the <a href="http://pub.dartlang.org/">pub</a> application, now <a href="http://pub.dartlang.org/">pub</a> has the token and stores it for later use.</p>

<p>```
12:22:46-adam@Adams-MacBook-Air:~/dart/stats.dart
$ pub publish
Publishing "stats" 0.0.4:
|-- .gitignore
|-- AUTHORS
|-- LICENSE
|-- README.md
|-- asset
|   |-- stats_dart_fps.png
|   '-- stats_dart_ms.png
|-- example
|   |-- basic
|   |   |-- statsdart.dart
|   |   '-- statsdart.html
|   '-- theming
|       |-- theming.dart
|       '-- theming.html
|-- lib
|   |-- src
|   |   '-- stats.dart
|   '-- stats.dart
|-- pubspec.yaml
'-- test</p>

<pre><code>|-- run.sh
|-- tests_browser.dart
'-- tests_browser.html
</code></pre>

<p>Looks great! Are you ready to upload your package (y/n)? y
Pub needs your authorization to upload packages on your behalf.
In a web browser, go to https://accounts.google.com/o/oauth2/auth?access_type=offline&amp;approval_prompt=force&amp;response_type=code&amp;client_id=818368855108-8grd2eg9tj9f38os6f1urbcvsq399u8n.apps.googleusercontent.com&amp;redirect_uri=http%3A%2F%2Flocalhost%3A62462&amp;scope=https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fuserinfo.email
Then click "Allow access".</p>

<p>Waiting for your authorization...
Authorization received, processing...
Successfully authorized.</p>

<p>Package "stats" already has version "0.0.4".
```</p>

<p><a href="/images/2013-01-27-using-dart-for-website-publishing-on-google-drive/allow_access.png"><img src="/images/2013-01-27-using-dart-for-website-publishing-on-google-drive/allow_access.png" alt="allow_access" /></a></p>

<p><a href="/images/2013-01-27-using-dart-for-website-publishing-on-google-drive/success.png"><img src="/images/2013-01-27-using-dart-for-website-publishing-on-google-drive/success.png" alt="success.png" /></a></p>

<p>After some initial slicing and dicing I was able to take what was needed from <a href="http://pub.dartlang.org/">pub</a> and merge it into <a href="https://github.com/dart-gde/dart-google-oauth2-library">dart-google-oauth2-library</a> that <a href="https://github.com/dart-gde/discovery_api_dart_client_generator">discovery_api_dart_client_generator</a> depends on for OAuth2 support. <a href="http://pub.dartlang.org/">pub</a> was structured such that all files are dart libraries, so ripping out parts was easy, I found the most issues with <a href="http://pub.dartlang.org/packages/http">http</a> package. The client <a href="https://github.com/dart-lang/bleeding_edge/blob/master/dart/pkg/http/lib/src/request.dart#L119">requests</a> <code>ContentType</code> could only be set as <code>application/x-www-form-urlencoded</code> when making requests, this did not seem to play nicely with Google APIs. Took many hours of debugging to figure out why <code>POST</code> method would fail but <code>GET</code> method would not. Stumbled on some Google mailing lists that mentioned some services do work with <code>ContentType</code> <code>application/x-www-form-urlencoded</code> and some only with <code>application/json</code>. So I created a separate client that does the <code>POST</code>, <code>PATCH</code>, <code>PUT</code>, <code>DELETE</code> methods required for the Google Client APIs.</p>

<p><strong>Big thanks</strong> to <a href="https://profiles.google.com/scarygami">Gerwin Sturm</a> for working on this merge with me, in a very short amount of time we've been able to push the <a href="https://github.com/dart-gde/dart-google-oauth2-library">dart-google-oauth2-library</a> and <a href="https://github.com/dart-gde/discovery_api_dart_client_generator">discovery_api_dart_client_generator</a> into almost complete solutions for dart and Google Client API services.</p>

<p>The <a href="https://github.com/financeCoding/markdown.dart">markdown.dart</a> processor was for the most part a total freebie, <a href="https://plus.google.com/100798142896685420545">Bob Nystrom</a> had already created a <a href="https://github.com/dart-lang/bleeding_edge/tree/master/dart/samples/markdown">markdown</a> processor which eventually got rolled into <a href="https://github.com/dart-lang/bleeding_edge/tree/master/dart/sdk/lib/_internal/dartdoc">Dartdoc</a>. All that was needed here is picking out the code from the dart repo, updating libraries and import, minor code clean up and hosting it on github.</p>

<p>One of my all time favorite Google APIs is the <a href="https://developers.google.com/url-shortener/">url-shortener</a> API. Even without OAuth2 you can use this service, now that we have patched up <a href="https://github.com/dart-gde/dart-google-oauth2-library">dart-google-oauth2-library</a> and <a href="https://github.com/dart-gde/discovery_api_dart_client_generator">discovery_api_dart_client_generator</a> shortening the long <a href="https://developers.google.com/drive/v2/reference/files">webViewLink</a> will be easy. A site note, <a href="http://goo.gl">goo.gl</a> links work great as for landing slides when giving a presentation, easy and short enough for audience to type into mobile phone, tablet or laptop to pull down your slides and follow along.</p>

<p>Now we have all the parts needed to create a simple application that reads in some markdown, processes it to html, creates a website folder on drive, uploads the final html, then generates a shortened url.</p>

<p><em>We are still working on the best way to publish the Dart Google Client APIs, so please don't depend on the links below for too long, they will be out dated soon. This was just for testing.</em></p>

<p>Starting off with our <code>pubspec.yaml</code> file we add the dependencies needed for the application.</p>

<p>```yaml
name:  drive_publish_markdown
description:  Publishing markdown content to a public drive site
dependencies:
  urlshortener_v1_api:</p>

<pre><code>git: https://github.com/financeCoding/urlshortener_v1_api_client.git
</code></pre>

<p>  drive_v2_api:</p>

<pre><code>git: https://github.com/financeCoding/drive_v2_api_client.git
</code></pre>

<p>  markdown:</p>

<pre><code>git: https://github.com/financeCoding/markdown.dart.git
</code></pre>

<p>```</p>

<p>Getting a <code>identifier</code> and <code>secret</code> is simple, just goto your <a href="https://code.google.com/apis/console">Google APIs Console</a> and pull out <code>Client ID</code> and <code>Client secret</code> for a <code>Client ID for installed applications</code> that was previously created. If you don't have one already they are easy to create.</p>

<ul>
<li><p>Goto API access in a project.<br/>
<a href="/images/2013-01-27-using-dart-for-website-publishing-on-google-drive/api_access.png"><img src="/images/2013-01-27-using-dart-for-website-publishing-on-google-drive/api_access.png" alt="api_access" /></a></p></li>
<li><p>Click Create another client ID.
<a href="/images/2013-01-27-using-dart-for-website-publishing-on-google-drive/create_another_client_id.png"><img src="/images/2013-01-27-using-dart-for-website-publishing-on-google-drive/create_another_client_id.png" alt="create_another_client_id" /></a></p></li>
<li><p>Choose Installed application and Installed type Other. Your Done!
<a href="/images/2013-01-27-using-dart-for-website-publishing-on-google-drive/create_client_id.png"><img src="/images/2013-01-27-using-dart-for-website-publishing-on-google-drive/create_client_id.png" alt="create_client_id" /></a></p></li>
</ul>


<p>Apply <code>identifier</code> and <code>secret</code> to your code.</p>

<p>```dart
import "dart:io";
import "dart:async";
import 'dart:crypto';
import "dart:json" as JSON;
import "package:google_oauth2_client/google_oauth2_console.dart";
import "package:drive_v2_api/drive_v2_api_console.dart" as drivelib;
import "package:urlshortener_v1_api/urlshortener_v1_api_console.dart" as urllib;
import "package:markdown/lib.dart" as markdown;</p>

<p>String identifier = "<IDENTIFIER>";
String secret = "<SECRET>";
List scopes = [drivelib.Drive.DRIVE_FILE_SCOPE, drivelib.Drive.DRIVE_SCOPE, urllib.Urlshortener.URLSHORTENER_SCOPE];
drivelib.Drive drive;
urllib.Urlshortener urlshort;
OAuth2Console auth;
```</p>

<p>Now with <code>identifier</code> and <code>secret</code> the setup for a dart application to use <code>Drive</code> and <code>Urlshortener</code> is easy, create a new <code>OAuth2Console</code> and pass them along to the constructor of <code>Drive</code> and <code>Urlshortener</code>. Note that the flag <code>makeAuthRequests</code> has been set on both objects, that allows us to make authroized calls on behalf of the user. You could create the Google Client API objects without a OAuth2 token and leave the <code>makeAuthRequests</code> as false, the objects would then only be allowed to access non-authenticated resources on the Google servers.</p>

<p>```dart
void main() {
  /<em>*
   * Create new or load existing oauth2 token.
   </em>/
  auth = new OAuth2Console(identifier: identifier, secret: secret, scopes: scopes);</p>

<p>  /<em>*
   * Create a new [drivelib.Drive] object with authenticated requests.
   </em>/
  drive = new drivelib.Drive(auth);
  drive.makeAuthRequests = true;</p>

<p>  /<em>*
   * Create a new [urllib.Urlshortener] object with authenticated requests.
   </em>/
  urlshort = new urllib.Urlshortener(auth);
  urlshort.makeAuthRequests = true;</p>

<p>  /<em><em>
   * Create a new 'public_folder' and insert markdown as html
   </em>/
  createPublicFolder("public_folder").then(processMarkdown);
}
<code>``
I have to admit, updating permissions took me awhile to figure out. I first tried to update by calling</code>drive.files.update<code>with a modified</code>drivelib.File<code>. That was not the proper way to change permissions on [drive]. The correct way is to call the</code>drive.permissions.</em><code>methods, lesson learned after some Googling and searching on [stackoverflow][] [drive-sdk][]. Setting the</code>Permissions<code>and</code>mimeType` are the most important parts to note here, thats what change the folder into a public website hosted on drive viewable to anyone.</p>

<p>```dart
void insertPermissions(drivelib.File file, Completer completer) {
  /<em>*
   * Create new [drivelib.Permission] for insertion to the
   * drive permissions list. This will mark the folder publicly
   * readable by anyone.
   </em>/
  var permissions = new drivelib.Permission.fromJson({</p>

<pre><code>"value": "",
"type": "anyone",
"role": "reader"
</code></pre>

<p>  });</p>

<p>  drive.permissions.insert(permissions, file.id).then((drivelib.Permission permission) => completer.complete(file));
}</p>

<p>Future&lt;drivelib.File> createPublicFolder(String folderName) {
  var completer = new Completer();</p>

<p>  /<em>*
   * Create the [drivelib.File] with a web folder app mime type.
   </em>/
  drivelib.File file = new drivelib.File.fromJson({</p>

<pre><code>'title': folderName,
'mimeType': "application/vnd.google-apps.folder"
</code></pre>

<p>  });</p>

<p>  /<em>*
   * Insert the [drivelib.File] to google drive.
   </em>/
  drive.files.insert(file).then((drivelib.File newfile) => insertPermissions(newfile, completer));</p>

<p>  return completer.future;
}
```</p>

<p>Now we get to the meat and potatoes of our application. At this point we have a public web folder that can host our content. We do the follow steps</p>

<ul>
<li>Read in the markdown and html template file</li>
<li>Replace a tag in the template with the markdown</li>
<li>Insert the file into drive</li>
<li>Add a parent reference to the file</li>
<li>Get the url to the folder</li>
<li>Shorten the url</li>
</ul>


<p>```dart
processMarkdown(drivelib.File folder) {
  /<em>*
   * Read in both markdown and html template
   </em>/
  var markdownFile = new File('markdown.md');
  var templateFile = new File('template.html');
  var markdownStr = markdownFile.readAsStringSync();
  var templateStr = templateFile.readAsStringSync();</p>

<p>  /<em>*
   * Convert markdown to html.
   </em>/
  var page = markdown.markdownToHtml(markdownStr);</p>

<p>  /<em>*
   * Replace $page with converted markdown.
   </em>/
  templateStr = templateStr.replaceFirst('\$page', page);</p>

<p>  /<em>*
   * Create a new [drivelib.File] to hold the html content.
   </em>/
  drivelib.File file = new drivelib.File.fromJson({</p>

<pre><code>'title': 'index.html',
'mimeType': "text/html"
</code></pre>

<p>  });</p>

<p>  /<em>*
   * Create a new [drivelib.ParentReference] to link the html file to.
   </em>/
  drivelib.ParentReference newParent = new drivelib.ParentReference.fromJson({'id': folder.id});</p>

<p>  /<em>*
   * Encode the content to Base64 for inserting into drive.
   </em>/
  var content = CryptoUtils.bytesToBase64(templateStr.charCodes);</p>

<p>  /<em>*
   * 1) Insert the new file with title index.html and type text/html
   * 2) Insert the new parent of the file (i.e. place the file in the folder)
   * 3) Get the folders web view link
   * 4) Shorten the web view link with UrlShortener
   </em>/
  drive.files.insert(file, content: content).then((drivelib.File insertedFile) {</p>

<pre><code>drive.parents.insert(newParent, insertedFile.id).then((drivelib.ParentReference parentReference) {
  drive.files.get(folder.id).then((folder) {
    print("Web View Link: ${folder.webViewLink}");
    var url = new urllib.Url.fromJson({'longUrl': folder.webViewLink});
    urlshort.url.insert(url).then((url) {
      print("Short Url ${url.id}");
    });
  });
});
</code></pre>

<p>  });
}
```</p>

<p>The code for this sample can be found on <a href="http://github.com">github</a> <a href="https://github.com/financeCoding/drive_publish_markdown">drive_publish_markdown</a>. Executing the sample follows the flow explained above</p>

<ul>
<li>Ask user to generate token</li>
<li>Get token from redirect</li>
<li>Store token</li>
<li>Make <a href="https://developers.google.com/drive/">drive</a> and <a href="https://developers.google.com/url-shortener/">url-shortener</a> requests.</li>
</ul>


<p>```
13:32:40-adam@Adams-MacBook-Air:~/dart/drive_publish_markdown/bin
$ dart drive_publish_markdown.dart
Client needs your authorization for scopes [https://www.googleapis.com/auth/drive.file, https://www.googleapis.com/auth/drive, https://www.googleapis.com/auth/urlshortener]
In a web browser, go to https://accounts.google.com/o/oauth2/auth?access_type=offline&amp;approval_prompt=force&amp;response_type=code&amp;client_id=299615367852-n0kfup30mfj5emlclfgud9g76itapvk9.apps.googleusercontent.com&amp;redirect_uri=http%3A%2F%2Flocalhost%3A62900&amp;scope=https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fdrive.file+https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fdrive+https%3A%2F%2Fwww.googleapis.com%2Fauth%2Furlshortener
Then click "Allow access".</p>

<p>Waiting for your authorization...
Authorization received, processing...
Calling curl with --insecure, ca-certificates.crt not found.
Successfully authorized.</p>

<p>Calling curl with --insecure, ca-certificates.crt not found.
Web View Link: https://www.googledrive.com/host/0B29MR2FlgtejWnh6SS03LWFnVE0/
Short Url http://goo.gl/3fGi3
```</p>

<p><a href="/images/2013-01-27-using-dart-for-website-publishing-on-google-drive/allow_access_drive_publish_markdown.png"><img src="/images/2013-01-27-using-dart-for-website-publishing-on-google-drive/allow_access_drive_publish_markdown.png" alt="allow_access_drive_publish_markdown" /></a></p>

<p><a href="/images/2013-01-27-using-dart-for-website-publishing-on-google-drive/generated_markdown_published_on_drive.png"><img src="/images/2013-01-27-using-dart-for-website-publishing-on-google-drive/generated_markdown_published_on_drive.png" alt="generated_markdown_published_on_drive" /></a></p>

<p>Thats all, have fun with this really simple and easy to get started sample.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Listing files with Google Drive and Dart]]></title>
    <link href="http://financeCoding.github.com/blog/2013/01/06/listing-files-with-google-drive-and-dart/"/>
    <updated>2013-01-06T18:23:00-08:00</updated>
    <id>http://financeCoding.github.com/blog/2013/01/06/listing-files-with-google-drive-and-dart</id>
    <content type="html"><![CDATA[<p>Moving forward with my curiosity of Google <a href="/blog/categories/Drive/">drive</a> and <a href="/blog/categories/Dart/">Dart</a>, today was spent creating a small <a href="https://github.com/financeCoding/dart_drive_files_list">sample</a> that lists files. For the most part this is a continuation of the following post <a href="/blog/2012/12/30/getting-started-with-dart-and-google-drive/">getting-started-with-dart-and-google-drive</a>.</p>

<p>Decided to move the loading of <a href="http://code.google.com/p/google-api-javascript-client/">client.js</a> into its own helper class for now. When dart has real support for Google client apis none of this will be needed. As of now this serves as good practice and examples of javascript/dart interop.</p>

<p>``` dart dart_drive_files_list.dart
/<em>*
 * Sample google api client loader.
 </em>/
class GoogleApiClientLoader {
  static const String <em>CLIENT_ID = '299615367852.apps.googleusercontent.com';
  static const String </em>SCOPE = 'https://www.googleapis.com/auth/drive';
  static const String _handleClientLoadName = "handleClientLoad";</p>

<p>  static void _loadScript() {</p>

<pre><code>/**
 * Create and load script element.
 */
ScriptElement script = new ScriptElement();
script.src = "http://apis.google.com/js/client.js?onload=$_handleClientLoadName";
script.type = "text/javascript";
document.body.children.add(script);
</code></pre>

<p>  }</p>

<p>  static void _createScopedCallbacks(var completer) {</p>

<pre><code>js.scoped((){
  /**
   * handleAuthResult is called from javascript when
   * the function to call once the login process is complete.
   */
  js.context.handleAuthResult = new js.Callback.many((js.Proxy authResult) {
    Map dartAuthResult = JSON.parse(js.context.JSON.stringify(authResult));
    completer.complete(dartAuthResult);
  });

  /**
   * This javascript method is called when the client.js script
   * is loaded.
   */
  js.context.handleClientLoad =  new js.Callback.many(() {
    js.context.window.setTimeout(js.context.checkAuth, 1);
  });

  /**
   * Authorization check if the client allows this
   * application to access its google drive.
   */
  js.context.checkAuth = new js.Callback.many(() {
    js.context.gapi.auth.authorize(
        js.map({
          'client_id': _CLIENT_ID,
          'scope': _SCOPE,
          'immediate': true
        }),
        js.context.handleAuthResult);
  });

});
</code></pre>

<p>  }</p>

<p>  /<em>*
   * Load the google client api, future returns
   * map results.
   </em>/
  static Future<Map> load() {</p>

<pre><code>var completer = new Completer();
_createScopedCallbacks(completer);
_loadScript();
return completer.future;
</code></pre>

<p>  }
}
```</p>

<p>The calling of <code>load()</code> returns a future with our authentication results. Eases the process of having the google drive scope available to the client application.</p>

<p>A simple dart <code>Drive</code> class created gives access to the list call from the javascript apis. The interesting point for me to learn is knowing that <code>client.js</code> has to load the drive api. In the <code>load()</code> future we call <code>js.context.gapi.client.load</code> which will take the api and version to be loaded for the client application.</p>

<p>``` dart dart_drive_files_list.dart
/<em>*
 * Sample google drive class.
 </em>/
class Drive {
  js.Proxy <em>drive;
  bool get </em>isLoaded => _drive != null;</p>

<p>  /<em>*
   * Load the gapi.client.drive api.
   </em>/
  Future<bool> load() {</p>

<pre><code>var completer = new Completer();
js.scoped(() {
  js.context.gapi.client.load('drive', 'v2', new js.Callback.once(() {
    _drive = js.context.gapi.client.drive;
    js.retain(_drive);
    completer.complete(true);
  }));
});
return completer.future;
</code></pre>

<p>  }</p>

<p>  /<em>*
   * Check if gapi.client.drive is loaded, if not
   * load before executing.
   </em>/
  void _loadederExecute(Function function) {</p>

<pre><code>if (_isLoaded) {
  function();
} else {
  load().then((s) {
    if (s == true) {
      function();
    } else {
      throw "loadedExecute failed";
    }
  });
}
</code></pre>

<p>  }</p>

<p>  /<em>*
   * List files with gapi.drive.files.list()
   </em>/
  Future<Map> list() {</p>

<pre><code>var completer = new Completer();
_loadederExecute(() {
  js.scoped(() {
    var request = _drive.files.list();
    request.execute(new js.Callback.once((js.Proxy jsonResp, var rawResp) {
      Map m = JSON.parse(js.context.JSON.stringify(jsonResp));
      completer.complete(m);
    }));
  });
});
return completer.future;
</code></pre>

<p>  }
}
```</p>

<p>With the following sugar classes it was easy to just list files from my google drive account.</p>

<p>``` dart dart_drive_files_list.dart
void main() {
  Drive drive = new Drive();
  GoogleApiClientLoader.load().then((result) {</p>

<pre><code>drive.list().then((Map files) {
  // https://developers.google.com/drive/v2/reference/files/list
  files['items'].forEach((i) {
    var li = new LIElement();
    AnchorElement a = new AnchorElement();
    a.href = i['alternateLink'];
    a.target = '_blank';
    a.text = i['title'];
    li.children.add(a);
    UListElement ul = query('#listmenu');
    ul.children.add(li);
  });
});
</code></pre>

<p>  });
}
```</p>

<p><a href="/images/2013-01-06-listing-files-with-google-drive-and-dart/listing_files_google_drive.png"><img src="/images/2013-01-06-listing-files-with-google-drive-and-dart/listing_files_google_drive.png" alt="listing-files-drive" /></a></p>

<p>Hopefully this helps with developers interested in google drive &amp; dart! Sample can be found on github <a href="https://github.com/financeCoding/dart_drive_files_list">dart_drive_files_list</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting started with Dart and Google Drive]]></title>
    <link href="http://financeCoding.github.com/blog/2012/12/30/getting-started-with-dart-and-google-drive/"/>
    <updated>2012-12-30T16:27:00-08:00</updated>
    <id>http://financeCoding.github.com/blog/2012/12/30/getting-started-with-dart-and-google-drive</id>
    <content type="html"><![CDATA[<p>Following the example code from google drive <a href="https://developers.google.com/drive/quickstart-js">quickstart</a> I was able to recreate the sample in <a href="http://www.dartlang.org">Dart</a>. A lot of the heavy lifting is done by the <a href="https://github.com/dart-lang/js-interop">js-interop</a> cause of the dependency on <a href="http://code.google.com/p/google-api-javascript-client">google javascript client api</a>. This solution is fine for now, I'd take a good guess the dart team will provide client apis at some point.</p>

<p>Started off by creating a new sample project <code>dart_drive_quickstart</code>, removed all default code and add js-interop.</p>

<p><a href="/images/2012-12-30-getting-started-with-dart-and-google-drive/create-new-app.png"><img src="/images/2012-12-30-getting-started-with-dart-and-google-drive/create-new-app.png" alt="create-new-app" /></a></p>

<p><a href="/images/2012-12-30-getting-started-with-dart-and-google-drive/remove-defaults.png"><img src="/images/2012-12-30-getting-started-with-dart-and-google-drive/remove-defaults.png" alt="remove-defaults" /></a></p>

<p>Bring in the javascript client apis as <code>ScriptElement</code> and set a <code>onload</code> handler to a dart callback.</p>

<p>``` dart dart_drive_quickstart.dart
import 'dart:html';
import 'dart:json';
import 'package:js/js.dart' as js;</p>

<p>final String CLIENT_ID = '<YOURCLIENTID>';
final String SCOPE = 'https://www.googleapis.com/auth/drive';</p>

<p>void main() {
  js.scoped((){</p>

<pre><code>js.context.handleAuthResult = new js.Callback.many((js.Proxy authResult) {
  Map dartAuthResult = JSON.parse(js.context.JSON.stringify(authResult));
  print("dartAuthResult = ${dartAuthResult}");
});      

js.context.handleClientLoad =  new js.Callback.many(() {
  js.context.window.setTimeout(js.context.checkAuth, 1);
});

js.context.checkAuth = new js.Callback.many(() {
  js.context.gapi.auth.authorize(
      js.map({
          'client_id': CLIENT_ID,
          'scope': SCOPE,
          'immediate': true
        }),
        js.context.handleAuthResult);
});         
</code></pre>

<p>  });</p>

<p>  ScriptElement script = new ScriptElement();
  script.src = "http://apis.google.com/js/client.js?onload=handleClientLoad";
  script.type = "text/javascript";
  document.body.children.add(script);
}
```</p>

<p>Manually adding the script code and hooking up a callback from javascript to dart seemed to work fine. I ran into issues with callbacks not being scoped when they should of been scoped. Another odd thing was the need for the call to <code>setTimeout</code>, the callback to <code>handleAuthResult</code> would not get fired if <code>checkAuth</code> was not called from <code>setTimeout</code>.</p>

<p>The rest of the code included was for the most part a direct translation of the quickstart sample. Added some dart flavoring when appropriate.</p>

<p>Here are some action shots and code. The full project can be found on github <a href="https://github.com/financeCoding/dart_drive_quickstart">dart_drive_quickstart</a></p>

<p><a href="/images/2012-12-30-getting-started-with-dart-and-google-drive/app-launched.png"><img src="/images/2012-12-30-getting-started-with-dart-and-google-drive/app-launched.png" alt="app-launched" /></a></p>

<p><a href="/images/2012-12-30-getting-started-with-dart-and-google-drive/file-choose.png"><img src="/images/2012-12-30-getting-started-with-dart-and-google-drive/file-choose.png" alt="file-choose" /></a></p>

<p><a href="/images/2012-12-30-getting-started-with-dart-and-google-drive/file-uploaded.png"><img src="/images/2012-12-30-getting-started-with-dart-and-google-drive/file-uploaded.png" alt="file-uploaded" /></a></p>

<p><a href="/images/2012-12-30-getting-started-with-dart-and-google-drive/file-opened-in-drive.png"><img src="/images/2012-12-30-getting-started-with-dart-and-google-drive/file-opened-in-drive.png" alt="file-opened-in-drive" /></a></p>

<p>``` dart dart_drive_quickstart.dart
import 'dart:html';
import 'dart:json';
import 'package:js/js.dart' as js;</p>

<p>final String CLIENT_ID = '299615367852.apps.googleusercontent.com';
final String SCOPE = 'https://www.googleapis.com/auth/drive';</p>

<p>void main() {
  js.scoped((){</p>

<pre><code>void insertFile(File fileData, [callback = null]) {
  String boundary = '-------314159265358979323846';
  String delimiter = "\r\n--$boundary\r\n";
  String close_delim = "\r\n--$boundary--";

  var reader = new FileReader();
  reader.readAsBinaryString(fileData);
  reader.on.load.add((Event e) {
    var contentType = fileData.type;
    if (contentType.isEmpty) {
      contentType = 'application/octet-stream';
    }

    var metadata = {
      'title' : fileData.name,
      'mimeType' : contentType
    };

    var base64Data = window.btoa(reader.result);
    var sb = new StringBuffer();
    sb
    ..add(delimiter)
    ..add('Content-Type: application/json\r\n\r\n')
    ..add(JSON.stringify(metadata))
    ..add(delimiter)
    ..add('Content-Type: ')
    ..add(contentType)
    ..add('\r\n')
    ..add('Content-Transfer-Encoding: base64\r\n')
    ..add('\r\n')
    ..add(base64Data)
    ..add(close_delim);

    var multipartRequestBody = sb.toString();

    print("multipartRequestBody");
    print(multipartRequestBody);

    js.scoped(() {
      var request = js.context.gapi.client.request(
        js.map({
          'path': '/upload/drive/v2/files',
          'method': 'POST',
          'params': {'uploadType': 'multipart'},
          'headers': {
            'Content-Type': 'multipart/mixed; boundary="$boundary"'
          },
          'body': multipartRequestBody
        }));

      if (callback == null) {
        callback = new js.Callback.many((js.Proxy jsonResp, var rawResp) {
          print(js.context.JSON.stringify(jsonResp));
          print(rawResp);

          Map r = JSON.parse(js.context.JSON.stringify(jsonResp));
          StringBuffer sb = new StringBuffer();
          if (r.containsKey('error')) {
            sb.add(r.toString());
          } else {
            sb.add("${r["title"]} has been uploaded.");
          }

          query('#text').text = sb.toString();
        });
      }

      request.execute(callback);
    });

  });
};

void uploadFile(Event evt) {
  js.scoped( () {
    js.context.gapi.client.load('drive', 'v2', new js.Callback.many(() {
      var file = evt.target.files[0];
      insertFile(file);
    }));
  });
}

js.context.handleAuthResult = new js.Callback.many((js.Proxy authResult) {
  Map dartAuthResult = JSON.parse(js.context.JSON.stringify(authResult));
  print("dartAuthResult = ${dartAuthResult}");

  var authButton = query('#authorizeButton');
  var filePicker = query('#filePicker');
  authButton.style.display = 'none';
  filePicker.style.display = 'none';

  if (!dartAuthResult.containsKey('error')) {
    // Access token has been successfully retrieved, requests can be sent to the API.
    filePicker.style.display = 'block';
    filePicker.on['change'].add(uploadFile);
  } else {
    authButton.style.display = 'block';
    authButton.on.click.add((Event e) {
      js.scoped(() {
        js.context.gapi.auth.authorize(
            js.map({
                'client_id': CLIENT_ID,
                'scope': SCOPE,
                'immediate': true
              }),
              js.context.handleAuthResult);
      });
    });
  }
});

js.context.handleClientLoad =  new js.Callback.many(() {
  js.context.window.setTimeout(js.context.checkAuth, 1);
});

js.context.checkAuth = new js.Callback.many(() {
  js.context.gapi.auth.authorize(
      js.map({
          'client_id': CLIENT_ID,
          'scope': SCOPE,
          'immediate': true
        }),
        js.context.handleAuthResult);
});
</code></pre>

<p>  });</p>

<p>  ScriptElement script = new ScriptElement();
  script.src = "http://apis.google.com/js/client.js?onload=handleClientLoad";
  script.type = "text/javascript";
  document.body.children.add(script);
}
```</p>
]]></content>
  </entry>
  
</feed>
